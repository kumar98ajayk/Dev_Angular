{"_id":"hdr-histogram-js","_rev":"26-4095ab1fd8cfd7d6fa4c8f7ce95b0121","name":"hdr-histogram-js","time":{"modified":"2021-12-28T11:01:40.959Z","created":"2016-12-16T01:06:03.386Z","1.0.0-beta.1":"2016-12-16T01:06:03.386Z","1.0.0-beta.2":"2016-12-25T15:46:42.253Z","1.0.0-beta.3":"2017-02-19T20:43:03.968Z","1.0.0":"2017-10-24T20:24:47.732Z","1.1.0":"2018-03-25T12:21:13.108Z","1.1.1":"2018-03-25T12:32:53.656Z","1.1.2":"2018-03-26T20:09:32.907Z","1.1.3":"2018-03-26T20:20:04.252Z","1.1.4":"2018-03-26T20:23:59.209Z","1.2.0":"2020-01-27T21:29:21.767Z","2.0.0-beta1":"2020-07-05T17:35:51.938Z","2.0.0-beta2":"2020-07-09T19:39:25.353Z","2.0.0-beta3":"2020-07-09T19:51:27.601Z","2.0.0-beta4":"2020-07-10T17:04:35.311Z","2.0.0-beta5":"2020-07-21T20:01:46.534Z","2.0.0-beta6":"2020-07-21T20:04:14.588Z","2.0.0-beta7":"2020-07-25T14:13:32.883Z","2.0.0":"2020-07-27T17:56:41.610Z","2.0.1":"2020-07-30T19:48:15.581Z","2.0.2":"2021-12-27T14:54:04.533Z","2.0.3":"2021-12-28T10:45:57.068Z","3.0.0":"2021-12-28T11:01:39.082Z"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"dist-tags":{"latest":"3.0.0","beta":"2.0.0-beta7"},"description":"TypeScript port of HdrHistogram","readme":"[![Build Status](https://travis-ci.org/HdrHistogram/HdrHistogramJS.svg?branch=master)](https://travis-ci.org/HdrHistogram/HdrHistogramJS)\n\n# HdrHistogramJS\n\nTypeScript port of HdrHistogram for NodeJS and web browsers.  \nSince version 2, HdrHistogramJS comes in 2 flavors: the good old TypeScript implementation and a brand new WebAssembly implementation!  \nThis new WebAssembly implementation leverages on AssemblyScript to bring a significant performance boost. Since some caution must be taken using this WebAssembly implementation it is not enabled by default.  \nCheck out the [WebAssembly section](#boosting-performances-with-webassembly-since-hdrhistogramjs-v2) for more details on this topic.  \nMost features from original Java HdrHistogram implementation are implemented, including the following ones:\n\n- regular latency recording\n- latency recording with coordinated omissions correction\n- resizable bucket based histograms\n- memory optimized packed histograms\n- add and substract histograms\n- encoding and decoding compressed histograms\n\n# Dataviz\n\nHdrHistogramJS allows to display histograms without server-side processing. Hence, within your browser, you can:\n\n- Display histograms with this slightly modified version of the [hdrhistogram plotter](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html). With this one you can use base64 v2 encoded histograms as inputs.\n- Analyze log files with this [log analyzer](https://hdrhistogram.github.io/HdrHistogramJSDemo/logparser.html), inspired from the original [java/swing based log analyzer](https://github.com/HdrHistogram/HistogramLogAnalyzer).\n\n# Getting started\n\nThis library is packaged as a UMD module, hence you can use it directly\nfrom JavaScript within a browser. To do so, you can simply include HdrHistogramJS file from github's release page:\n\n```html\n<script src=\"https://github.com/HdrHistogram/HdrHistogramJS/releases/download/v2.0.2/hdrhistogram.umd.js\"></script>\n```\n\nThen you will have access to classes and functions of the APIs using \"hdr\" prefix.\n\nYou can also use HdrHistogramJS as a commonjs NodeJS module.\nUsing npm you can get HdrHIstogramJS with the following command:\n\n```sh\n  npm i hdr-histogram-js\n```\n\nOr if you like yarn better:\n\n```sh\n  yarn add hdr-histogram-js\n```\n\nNote for TypeScript developers: since HdrHistogramJS has been written in TypeScript, definition files are embedded, no additional task is needed to get them.\n\n# API\n\nThe examples below use ES6 syntax. You can check out demo sources\nfor examples on how to use HdrHistogram directly within a browser, you should\nnot have any surprise though.\n\n## Instantiate an histogram\n\nHdrHistogramJS provides several histogram implementations. The simplest way to get a new histogram instance is to use the _build()_ function. Here is how to use it:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\n```\n\nIf you need more control on the memory footprint of the instantiated histogram, you can be more specific using and optionnal build request parameter:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram\n  = hdr.build(\n    {\n      bitBucketSize: 32,                // may be 8, 16, 32, 64 or 'packed'\n      autoResize: true,                 // default value is true\n      lowestDiscernibleValue: 1,        // default value is also 1\n      highestTrackableValue: 2,         // can increase up to Number.MAX_SAFE_INTEGER\n      numberOfSignificantValueDigits: 3 // Number between 1 and 5 (inclusive)\n      useWebAssembly: false             // default value is false, see WebAssembly section for details\n    }\n  );\n\n```\n\nBitBucketSize 'packed' options is available since HdrHistogramJS v1.2 . Like the Java packed implementation, it has a very low memory footprint but it is way slower than regular bucket based implementation.\n\n## Record values and retrieve metrics\n\nOnce you have an histogram instance, in order to record a value you just need\nto call method recordValue() as below:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\nconst histogram = hdr.build();\n...\nconst latency = 1234;\nhistogram.recordValue(latency);\n```\n\nThe number passed as a parameter is expected to be an integer. If it is not the case, the decimal part will be ignored.\n\nOnce you have recorded some values, you can get min, max, median values and of course percentiles values as shown below:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\n\nconst h = hdr.build();\nh.recordValue(123);\nh.recordValue(122);\nh.recordValue(1244);\n\nconsole.log(h.minNonZeroValue);           // 122\nconsole.log(h.maxValue);                  // 1244\nconsole.log(h.mean);                      // 486.333...\nconsole.log(h.getValueAtPercentile(90));  // 1244 as well\nconsole.log(h.summary);                   // { \"p50\": 123, ... , max: 1244, totalCount: 3 }\n```\n\nIf youn need a live example you can also take alook at this [simple ping demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/ping-demo.html) or this [HdrHistogramJS on HdrHistogramJS demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/hdr-on-hdr.html).\n\nYou can also very easily generate a textual\nrepresentation of an histogram:\n\n```ts\nconsole.log(`Statistics ${h}`);\n\n// output will be:\n//\n// Statistics Histogram 32b {\n//  \"p50\": 123,\n//  \"p75\": 1240,\n//  \"p90\": 1240,\n//  \"p97_5\": 1240,\n//  \"p99\": 1240,\n//  \"p99_9\": 1240,\n//  \"p99_99\": 1240,\n//  \"p99_999\": 1240,\n//  \"max\": 1244,\n//  \"totalCount\": 3\n// }\n\n```\n\nYou can also general an exhaustive textual representation similar to the one generated by the original Java HdrHistogram implementation:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordValue(25);\nhistogram.recordValue(50);\nhistogram.recordValue(75);\nconst output = histogram.outputPercentileDistribution();\n\n// output will be:\n//\n//       Value     Percentile TotalCount 1/(1-Percentile)\n//\n//      25.000 0.000000000000          1           1.00\n//  ...\n//      75.000 0.700000000000          3           3.33\n//      75.000 1.000000000000          3\n//#[Mean    =       50.000, StdDeviation   =       20.412]\n//#[Max     =       75.000, Total count    =            3]\n//#[Buckets =           43, SubBuckets     =         2048]\n\n```\n\n## Dealing with coordinated omissions\n\nIf you are recording values at a fixed rate,\nyou can correct coordinated omissions while recording values:\n\n```ts\nhistogram.recordValueWithExpectedInterval(1234, 100);\n```\n\nIf you prefer to apply correction afterward:\n\n```ts\nconst correctedHistogram\n  = histogram.copyCorrectedForCoordinatedOmission(100);\n```\n\n## Boosting performances with WebAssembly\n\nSince version 2, HdrHistogramJS leverages on WebAssembly to speed up computations. Depending on the use case, the performance boost can be as high as twice as fast :)  \nEverything has been done to make your life easier when using HdrHistogramJS WebAssembly implementation, but since the usage a little bit different WebAssembly is not enabled by default.  \nTo benefit from WebAssembly performance boost, there are three things to take care of:\n\n- Bootstrap the HdrHistogramJS WebAssembly module at application startup\n- Build a WebAssembly histogram setting the useWebAssembly flag to true\n- Explicitely ask to free up memory by calling _histogram.destroy()_ once an histogram is not needed anymore.\n\nEven if under the cover a WebAssembly histogram is very different from a regular JS based histogram, both provide exactly the same interface.  \nThe code fragment below shows how to instantiate a resizable 32 bits WebAssembly histogram:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\n\n// If you are on the browser side, you need to\n// load asynchronously HdrHistogramJS WASM module\nawait hdr.initWebAssembly();\n\n// If you are on the server side, you can\n// load synchronously HdrHistogramJS WASM module\nhdr.initWebAssemblySync();\n\nconst histogram = hdr.build({ useWebAssembly: true });\n\n// you can now use your histogram the same way you would do\n// with a regular \"JS histogram\"\nhistogram.recordValue(42);\nconsole.log(histogram.outputPercentileDistribution());\n\n// free up memory once the histogram is not needed anymore,\n// otherwise WebAssembly memory footprint will keep growing\n// each time an histogram is created\nhistogram.destroy();\n\n```\n\nNote: If you want to use this feature on the browser side, along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is mandatory to bootstrap the WASM module which is compressed to save some weight.\n\n## Encode & decode\n\nYou can encode and decode base64 compressed histograms. Hence you can decode base64 compressed histograms produced by other implementations of HdrHistogram (Java, C#, Rust, ...).  \nThe code fragment below shows how to encode an histogram:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordvalue(42);\nconst encodedString = hdr.encodeIntoCompressedBase64(histogram);\n// gives something that looks like \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\"\n```\n\nThen to decode an histogram you can use this chunk of code:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString);\n```\n\nIn the above code fragment, 'histogram' is a regular 32b bucket histogram. Other types of histograms can be specified using additionnal parameters. Below a code fragment where a WebAssembly packed histogram is used:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString, 'packed', true);\n```\n\nIf you want to use this feature along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is used for zlib compression. Using npm you should get\nit as a transitive dependency, otherwise you need to add it in\nyour html page.\n\nYou can check out [this demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/decoding-demo.html) or this [plotter on steroid](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html) to see this feature live!  \n_Be aware that only latest V2 encoding has been implemented, please raise a github issue if you need to see other versions implemented_\n\n## Histogram logs\n\nHistogramLogWriter and HistogramLogReader classes have been migrated and the API is quite similar to the one you might have used with the Java version.\nBelow a simple usage example of the HistogramLogWriter, where the log contents are appended to a string variable:\n\n```ts\nimport * as hdr from \"hdr-histogram-js\"\n\nlet buffer: string;\nconst writer = new hdr.HistogramLogWriter(content => {\n  buffer += content;\n});\nconst histogram = hdr.build();\nhistogram.startTimeStampMsec = 1234001;\nhistogram.endTimeStampMsec   = 1235123;\n\n...\n\nhistogram.recordValue(123000);\n\nwriter.outputLogFormatVersion();\nwriter.outputLegend();\nwriter.outputIntervalHistogram(histogram);\n```\n\nAs for the reading part, if you know a little bit the Java version, the following code fragment will sound familiar:\n\n```ts\nconst reader = new hdr.HistogramLogReader(fileContent);\nlet histogram;\nwhile ((histogram = reader.nextIntervalHistogram()) != null) {\n  // iterate on all histogram log lines\n  ...\n\n}\n```\n\n# Performance tips\n\nHdrHistogramJS stores values in memory buckets. Memory footprint of an histogram heavily depends on 3 things:\n\n- the bucket size. A bucket can take 8, 16, 32 or 64 bits of memory. 32 bits buckets is the default.\n- the precision of the histogram (i.e. the number of significant value digits). You can have up to 5 value digits, 3 value digits (default) should be enough for most use cases.\n- the allowed range of values. You can tunned this range with constructor/builder parameters _lowestDiscernibleValue_ and _highestTrackableValue_. If you are not sure of these values, the best option is to use flag _autoResize_, set to true by default.\n\nWhile tunning memory footprint, _estimatedFootprintInBytes_ histogram property can get quite useful since it gives you a clear indicator of the memory cost:\n\n```ts\nconst histogram = hdr.build();\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nIf in your context saving memory is more important than saving CPU cycles, 'packed' bucket size is highly recommended. Available since HdrHistogramJS v1.2.0, this mode enables a very effective memory compression algorithm:\n\n```ts\nconst histogram = hdr.build({ bitBucketSize: \"packed\" });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nLast but not least, unless you are targetting very old browsers or a very old NodeJS version, you should turn on WebAssembly mode. Available since HdrHistogramJS v2.0.0, this mode is often twice as fast as regular JS mode. Also all bucket size options are available with WebAssembly, including 'packed':\n\n```ts\nconst histogram = hdr.build({ bitBucketSize: \"packed\", useWebAssembly: true });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\n# Tree Shaking\n\nThe above examples use a convenient 'barrel' index file. Using this barrel, you cannot leverage on the tree shaking features of your favorite bundler. Hence the size of your JavaScript bundle may increase significantly. If you need to optimize the size of your bundle, you can import HdrHistogram modules as shown in code fragment below:\n\n```ts\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n\nconst histogram = new Int32Histogram(1, 2, 3);\nhistogram.autoResize = true;\n\nhistogram.recordValue(...);\n\n```\n\n# Migrating from v1 to v2\n\nFor most users, migration from HdrHistogramJS v1 to v2 should be smooth. However since HdrHistogramJS v2 does not stick anymore with HdrHistogram Java API, you might run into some breaking changes.  \nPrior to v2, _hdr.build()_ was returning an _AbstractHistogram_ instance. _AbstractHistogram_ does not exist anymore and has been replaced by the _Histogram_ interface. Most methods from _AbstractHistogram_ still exist in new interface _Histogram_, however in order to have a more JS idiomatic API, getter methods such as _getMean()_ or _getTotalCount()_ have been replaced by JS properties:\n\n```ts\n// HdrHistogramJS v1\nconst histogram: AbstractHistogram = hdr.build();\nconst statistics = {\n  count: histogram.getTotalCount(),\n  mean: histogram.getMean(),\n  p99: histogram.getValueAtPercentile(99),\n}\n\n// becomes with HdrHistogramJS v2\nconst histogram: Histogram = hdr.build();\nconst statistics = {\n  count: histogram.totalCount,\n  mean: histogram.mean,\n  p99: histogram.getValueAtPercentile(99),\n}\n```\n\nModule paths also change a little bit with v2. Hence if you were importing specific modules as described in the tree shaking section, you need to change a little bit your code as below:\n\n```ts\n// HdrHistogramJS v1\nimport AbstractHistogram from \"hdr-histogram-js/AbstractHistogram\"\nimport Int32Histogram from \"hdr-histogram-js/Int32Histogram\"\n\n// becomes with HdrHistogramJS v2\nimport Histogram from \"hdr-histogram-js/dist/Histogram\"\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n```\n\n# Design & Limitations\n\nThe code is almost a direct port of the Java version.\nOptimisation based on inheritance to avoid false sharing\nmight not be relevant in JS, but I believe that keeping\nthe same code structure might be handy to keep the code up to date\nwith the Java version in the future.\n\nMain limitations comes from number support in JavaScript.\nThere is no such thing as 64b integers in JavaScript. Everything is \"number\",\nand a number is safe as an integer up to 2^53.  \nThe most annoying issue encountered during the code migration,\nis that bit operations, heavily used within original HdrHistogram,\nonly work on the first 32 bits. That means that the following JavaScript expression is evaluated as true:\n\n```ts\nMath.pow(2, 31) << 1 === 0   // sad but true\n```\n\nAnyway bit shift operations are not really optimized\nin most browser, so... everything related to bits have been\nconverted to good old arithmetic expressions in the process\nof converting the Java code to TypeScript.  \nWith WebAssembly and AssemblyScript things are different. HdrHistogramsJS AssemblyScript source code is closer to the original Java code since all the limitations mentioned above does not apply to WebAssembly :)\n","versions":{"1.0.0-beta.2":{"name":"hdr-histogram-js","version":"1.0.0-beta.2","description":"TypeScript port of HdrHistogram","main":"./dist/hdrhistogram.js","types":"./dist/index.d.ts","scripts":{"tsc":"tsc","test":"mocha --opts mocha.opts --watch","test:coverage":"nyc mocha --opts mocha.opts","prepublish":"webpack --debug && webpack -p"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@types/chai":"^3.4.34","@types/core-js":"^0.9.34","@types/mocha":"^2.2.32","chai":"^3.5.0","core-js":"^2.4.1","mocha":"^3.0.2","nyc":"^8.4.0","ts-loader":"^1.2.2","ts-node":"^1.4.1","typescript":"^2.0.10","webpack":"^1.13.3","yargs":"^6.4.0"},"nyc":{"include":["src/**/*.ts"],"exclude":["node_modules/","dist/","src/**/*.spec.ts"],"extension":[".ts"],"require":["ts-node/register"],"reporter":["text-summary","json","html"],"all":true},"dependencies":{"base64-js":"^1.2.0","pako":"^1.0.3"},"files":["dist"],"gitHead":"c0ea61dad2f312939e6d8a39488740370c127b44","_id":"hdr-histogram-js@1.0.0-beta.2","_shasum":"4b5f7d9aae6fcccf9194f8282418c6820ff33400","_from":".","_npmVersion":"3.8.7","_nodeVersion":"6.7.0","_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"dist":{"shasum":"4b5f7d9aae6fcccf9194f8282418c6820ff33400","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-1.0.0-beta.2.tgz"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/hdr-histogram-js-1.0.0-beta.2.tgz_1482680801525_0.7546974446158856"},"directories":{}},"1.0.0-beta.3":{"name":"hdr-histogram-js","version":"1.0.0-beta.3","description":"TypeScript port of HdrHistogram","main":"./dist/hdrhistogram.js","types":"./dist/index.d.ts","scripts":{"tsc":"tsc","test":"mocha --opts mocha.opts --watch","test:coverage":"nyc mocha --opts mocha.opts","prepublish":"webpack --debug && webpack -p"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@types/chai":"^3.4.34","@types/core-js":"^0.9.35","@types/mocha":"^2.2.37","@types/node":"^7.0.0","chai":"^3.5.0","core-js":"^2.4.1","mocha":"^3.0.2","nyc":"^8.4.0","ts-loader":"^1.3.3","ts-node":"^2.0.0","typescript":"2.1.5","webpack":"^1.13.3","yargs":"^6.4.0"},"nyc":{"include":["src/**/*.ts"],"exclude":["node_modules/","dist/","src/**/*.spec.ts"],"extension":[".ts"],"require":["ts-node/register"],"reporter":["text-summary","json","html"],"all":true},"dependencies":{"base64-js":"^1.2.0","pako":"^1.0.3"},"files":["dist"],"gitHead":"df295320304a233b8bcd81c94d4cac3b3a392bfa","_id":"hdr-histogram-js@1.0.0-beta.3","_shasum":"9c917d1afe4fa625ba355e4227a45ed07e7ec046","_from":".","_npmVersion":"3.8.7","_nodeVersion":"6.7.0","_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"dist":{"shasum":"9c917d1afe4fa625ba355e4227a45ed07e7ec046","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-1.0.0-beta.3.tgz"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/hdr-histogram-js-1.0.0-beta.3.tgz_1487536981831_0.8008064066525549"},"directories":{}},"1.0.0":{"name":"hdr-histogram-js","version":"1.0.0","description":"TypeScript port of HdrHistogram","main":"./dist/index.js","types":"./dist/index.d.ts","scripts":{"tsc":"tsc --outDir dist","test":"mocha --opts mocha.opts --watch","test:coverage":"nyc mocha --opts mocha.opts","prepublish":"tsc --outDir dist --declaration true --sourceMap true && webpack --debug && webpack -p","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@types/chai":"^3.4.34","@types/mocha":"^2.2.37","@types/node":"7.0.0","chai":"^3.5.0","core-js":"^2.4.1","mocha":"^3.0.2","nyc":"^8.4.0","prettier":"^1.6.1","ts-loader":"^2.3.2","ts-node":"^3.3.0","typescript":"^2.2.2","webpack":"^1.13.3","yargs":"^6.4.0"},"nyc":{"include":["src/**/*.ts"],"exclude":["node_modules/","dist/","src/**/*.spec.ts"],"extension":[".ts"],"require":["ts-node/register"],"reporter":["text-summary","json","html"],"all":true},"dependencies":{"base64-js":"^1.2.0","pako":"^1.0.3"},"files":["dist"],"gitHead":"5c866110c451230d21b818805c155dc0af10bbca","bugs":{"url":"https://github.com/HdrHistogram/HdrHistogramJS/issues"},"homepage":"https://github.com/HdrHistogram/HdrHistogramJS#readme","_id":"hdr-histogram-js@1.0.0","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"dist":{"integrity":"sha512-uEWTOmi7Se39QFM9coUlY3hSX6ktjyeI/HTZbN18uE6Mwnvi6pmHjIZBb2+0yLz+9F4+gu6n1UqL3wy5AYlWhA==","shasum":"781615e5820c676908f9c61029bd946352a5d4b0","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-1.0.0.tgz"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js-1.0.0.tgz_1508876686437_0.9938986341003329"},"directories":{}},"1.1.0":{"name":"hdr-histogram-js","version":"1.1.0","description":"TypeScript port of HdrHistogram","main":"./index.js","types":"./index.d.ts","scripts":{"tsc":"tsc --outDir dist","test":"mocha --opts mocha.opts --watch","test:coverage":"nyc mocha --opts mocha.opts","test:stryker":"stryker run","prepare-publish":"tsc --outDir . --declaration true --sourceMap true && webpack --debug && webpack -p","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@types/chai":"^3.4.34","@types/mocha":"^2.2.37","@types/node":"7.0.0","chai":"^3.5.0","core-js":"^2.4.1","jsverify":"^0.8.3","mocha":"^3.0.2","nyc":"^8.4.0","prettier":"^1.6.1","stryker":"^0.19.3","stryker-api":"^0.13.0","stryker-html-reporter":"^0.12.1","stryker-mocha-runner":"^0.10.5","stryker-typescript":"^0.9.1","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^2.7.1","webpack":"^1.13.3","yargs":"^6.4.0"},"nyc":{"include":["src/**/*.ts"],"exclude":["node_modules/","dist/","src/**/*.spec.ts"],"extension":[".ts"],"require":["ts-node/register"],"reporter":["text-summary","json","html"],"all":true},"dependencies":{"base64-js":"^1.2.0","pako":"^1.0.3"},"files":["dist"],"_id":"hdr-histogram-js@1.1.0","dist":{"shasum":"ff3787ba2ab05265782b31a35789566fce753585","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-1.1.0.tgz","fileCount":7,"unpackedSize":618185},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_1.1.0_1521980472983_0.7525147836452628"},"_hasShrinkwrap":false},"1.1.1":{"name":"hdr-histogram-js","version":"1.1.1","description":"TypeScript port of HdrHistogram","main":"./index.js","types":"./index.d.ts","scripts":{"tsc":"tsc --outDir dist","test":"mocha --opts mocha.opts --watch","test:coverage":"nyc mocha --opts mocha.opts","test:stryker":"stryker run","prepare-publish":"tsc --outDir . --declaration true --sourceMap true && webpack --debug && webpack -p","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@types/chai":"^3.4.34","@types/mocha":"^2.2.37","@types/node":"7.0.0","chai":"^3.5.0","core-js":"^2.4.1","jsverify":"^0.8.3","mocha":"^3.0.2","nyc":"^8.4.0","prettier":"^1.6.1","stryker":"^0.19.3","stryker-api":"^0.13.0","stryker-html-reporter":"^0.12.1","stryker-mocha-runner":"^0.10.5","stryker-typescript":"^0.9.1","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^2.7.1","webpack":"^1.13.3","yargs":"^6.4.0"},"nyc":{"include":["src/**/*.ts"],"exclude":["node_modules/","dist/","src/**/*.spec.ts"],"extension":[".ts"],"require":["ts-node/register"],"reporter":["text-summary","json","html"],"all":true},"dependencies":{"base64-js":"^1.2.0","pako":"^1.0.3"},"files":["dist"],"_id":"hdr-histogram-js@1.1.1","dist":{"shasum":"6b7ffac81cd2b980c21aaa0a99c8c4107df9a971","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-1.1.1.tgz","fileCount":8,"unpackedSize":628590},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_1.1.1_1521981173560_0.4145523355113945"},"_hasShrinkwrap":false},"1.1.2":{"name":"hdr-histogram-js","version":"1.1.2","description":"TypeScript port of HdrHistogram","main":"./index.js","types":"./index.d.ts","scripts":{"tsc":"tsc --outDir dist","test":"mocha --opts mocha.opts --watch","test:coverage":"nyc mocha --opts mocha.opts","test:stryker":"stryker run","prepare-publish":"tsc --outDir . --declaration true --sourceMap true && webpack --debug && webpack -p","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@types/chai":"^3.4.34","@types/mocha":"^2.2.37","@types/node":"7.0.0","chai":"^3.5.0","core-js":"^2.4.1","jsverify":"^0.8.3","mocha":"^3.0.2","nyc":"^8.4.0","prettier":"^1.6.1","stryker":"^0.19.3","stryker-api":"^0.13.0","stryker-html-reporter":"^0.12.1","stryker-mocha-runner":"^0.10.5","stryker-typescript":"^0.9.1","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^2.7.1","webpack":"^1.13.3","yargs":"^6.4.0"},"nyc":{"include":["src/**/*.ts"],"exclude":["node_modules/","dist/","src/**/*.spec.ts"],"extension":[".ts"],"require":["ts-node/register"],"reporter":["text-summary","json","html"],"all":true},"dependencies":{"base64-js":"^1.2.0","pako":"^1.0.3"},"files":["dist"],"licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@1.1.2","dist":{"shasum":"c7130a1e788583de4d4d867e97f33c745dcc1dab","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-1.1.2.tgz","fileCount":19,"unpackedSize":629912},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_1.1.2_1522094972564_0.16429755846783567"},"_hasShrinkwrap":false},"1.1.3":{"name":"hdr-histogram-js","version":"1.1.3","description":"TypeScript port of HdrHistogram","main":"./index.js","types":"./index.d.ts","scripts":{"tsc":"tsc --outDir dist","test":"mocha --opts mocha.opts --watch","test:coverage":"nyc mocha --opts mocha.opts","test:stryker":"stryker run","prepare-publish":"tsc --outDir . --declaration true --sourceMap true && webpack --debug && webpack -p","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@types/chai":"^3.4.34","@types/mocha":"^2.2.37","@types/node":"7.0.0","chai":"^3.5.0","core-js":"^2.4.1","jsverify":"^0.8.3","mocha":"^3.0.2","nyc":"^8.4.0","prettier":"^1.6.1","stryker":"^0.19.3","stryker-api":"^0.13.0","stryker-html-reporter":"^0.12.1","stryker-mocha-runner":"^0.10.5","stryker-typescript":"^0.9.1","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^2.7.1","webpack":"^1.13.3","yargs":"^6.4.0"},"nyc":{"include":["src/**/*.ts"],"exclude":["node_modules/","dist/","src/**/*.spec.ts"],"extension":[".ts"],"require":["ts-node/register"],"reporter":["text-summary","json","html"],"all":true},"dependencies":{"base64-js":"^1.2.0","pako":"^1.0.3"},"files":["dist"],"_id":"hdr-histogram-js@1.1.3","dist":{"shasum":"75b5833579e58e697b350d25902827373eaaeb6c","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-1.1.3.tgz","fileCount":8,"unpackedSize":628590},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_1.1.3_1522095604141_0.09105827525232635"},"_hasShrinkwrap":false},"1.1.4":{"name":"hdr-histogram-js","version":"1.1.4","description":"TypeScript port of HdrHistogram","main":"./index.js","types":"./index.d.ts","scripts":{"tsc":"tsc --outDir dist","test":"mocha --opts mocha.opts --watch","test:coverage":"nyc mocha --opts mocha.opts","test:stryker":"stryker run","prepare-publish":"tsc --outDir . --declaration true --sourceMap true && webpack --debug && webpack -p","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@types/chai":"^3.4.34","@types/mocha":"^2.2.37","@types/node":"7.0.0","chai":"^3.5.0","core-js":"^2.4.1","jsverify":"^0.8.3","mocha":"^3.0.2","nyc":"^8.4.0","prettier":"^1.6.1","stryker":"^0.19.3","stryker-api":"^0.13.0","stryker-html-reporter":"^0.12.1","stryker-mocha-runner":"^0.10.5","stryker-typescript":"^0.9.1","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^2.7.1","webpack":"^1.13.3","yargs":"^6.4.0"},"nyc":{"include":["src/**/*.ts"],"exclude":["node_modules/","dist/","src/**/*.spec.ts"],"extension":[".ts"],"require":["ts-node/register"],"reporter":["text-summary","json","html"],"all":true},"dependencies":{"base64-js":"^1.2.0","pako":"^1.0.3"},"files":[".","dist"],"_id":"hdr-histogram-js@1.1.4","dist":{"shasum":"74134025d1ae1cfef5d7f1127eb7560de2a0a773","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-1.1.4.tgz","fileCount":168,"unpackedSize":1250250},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_1.1.4_1522095839084_0.6437924175488783"},"_hasShrinkwrap":false},"1.2.0":{"name":"hdr-histogram-js","version":"1.2.0","description":"TypeScript port of HdrHistogram","main":"./index.js","types":"./index.d.ts","scripts":{"tsc":"tsc --outDir dist","test":"mocha --opts mocha.opts","test:coverage":"nyc mocha --opts mocha.opts","test:stryker":"stryker run","build":"yarn tsc && webpack --debug && webpack -p","prepare-publish":"tsc --outDir . --declaration true --sourceMap true && webpack --debug && webpack -p","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@types/benchmark":"^1.0.31","@types/chai":"^3.4.34","@types/mocha":"^5.2.0","@types/node":"7.0.0","benchmark":"^2.1.4","benny":"^3.6.14","chai":"^3.5.0","core-js":"^2.4.1","fast-check":"^1.1.1","mocha":"^5.2.0","nyc":"^8.4.0","prettier":"^1.6.1","stryker":"^0.19.3","stryker-api":"^0.13.0","stryker-html-reporter":"^0.12.1","stryker-mocha-runner":"^0.10.5","stryker-typescript":"^0.9.1","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","webpack":"^1.13.3","yargs":"^6.4.0"},"nyc":{"include":["src/**/*.ts"],"exclude":["node_modules/","dist/","src/**/*.spec.ts"],"extension":[".ts"],"require":["ts-node/register"],"reporter":["text-summary","json","html"],"all":true},"dependencies":{"base64-js":"^1.2.0","pako":"^1.0.3"},"licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@1.2.0","dist":{"shasum":"1213c0b317f39b9c05bc4f208cb7931dbbc192ae","integrity":"sha512-h0YToJ3ewqsaZ3nFTTa6dLOD7sqx+EgdC4+OcJ9Ou7zZDlT0sXSPHHr3cyenQsPqqbVHGn/oFY6zjfEKXGvzmQ==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-1.2.0.tgz","fileCount":236,"unpackedSize":1711379,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeL1YyCRA9TVsSAnZWagAAHnUP/jWPezI9vwy2+GoQTy/A\naFIg02/X/L2kqP3ld8mtEVHNC5anFywLXZ/PZFrv76yyIoSJjsKH0Kc/Ioe+\nAJoV7/nm7o9mx3kUSDNlLu1TTaDK8XkAhw7soKqko/IH1WSvWPfqJqQ3D3z+\nrbXre9E6bCtlIcPktklO2Ub7WJxodlSgaG/RSjs123d4L7SqVn2KEqhtOxv+\nKkKV0Gkk5Z5end9W8xjyNVegGMSmV8xf3jem+aAZFUCpqllFJ21Jne8SWMGj\nrSIo7LmNUY+wp0/2GTueqbrzYPB1J4gEgvWBCL303FMxl8EJldRZaTkVOGuQ\n5iTFrL3qCnw+uYCfODnijcNR7E3in48zQ9nr0EiMnNqUHCUGFV/u45eDdK9d\nYSgbvB0V5BZ510ZVASxHna7G0HmYeT0lErt34lZQym+kNXFPLE+rcAToT7gc\n3NLIlkVlmhy6G45BApndakb5M+QqIfyyh9iEoZ7HA8MD18/k6G6e21N7yRI0\nll2Wp56ChIqJUAq4hoVzCL9u/ReUDFm9BmfliiaqknbSvxxn+aawCDEZ1ScW\nuMUzLYh0ga0JPeRYl2Usrc4aUvTcKZZQNlb6gA6CWDRcXOK7Y6euXGRCkKPo\nFUPsmkD/n14FG+615HZUvaHDYLQWNy0wFc90JPxEtZh5rRPsbRs4AExlc9sR\nJaN1\r\n=kK4G\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_1.2.0_1580160561559_0.4473383492045435"},"_hasShrinkwrap":false},"2.0.0-beta1":{"name":"hdr-histogram-js","version":"2.0.0-beta1","description":"TypeScript port of HdrHistogram","main":"dist/index.js","module":"dist/hdrhistogram.esm.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"readmeFilename":"README.md","readme":"[![Build Status](https://travis-ci.org/HdrHistogram/HdrHistogramJS.svg?branch=master)](https://travis-ci.org/HdrHistogram/HdrHistogramJS)\n\n# HdrHistogramJS\n\nTypeScript port of HdrHistogram for NodeJS and web browsers.  \nSince version 2, HdrHistogramJS comes in 2 flavors: the good old TypeScript implementation and a new WebAssembly implementation. This new WebAssembly impelmentation leverages on AssemblyScript and brings a significant performance boost. Since some caution must be taken using this WebAssembly implementation it is not enabled by default. Check out the WebAssembly section for more details on this topic.\nMost features from Java original HdrHistogram implementations are implemented, including the following ones:\n\n- regular latency recording\n- latency recording with coordinated omissions correction\n- resizable bucket based histograms\n- memory efficient packed histograms\n- add and substract histograms\n- plain text or csv histograms outputs\n- encoding and decoding compressed histograms\n\n# Dataviz\n\nHdrHistogramJS allows to display histograms without server-side processing. Hence, within your browser, you can:\n\n- Display histograms with this slightly modified version of the [hdrhistogram plotter](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html). With this one you can use base64 v2 encoded histograms as inputs.\n- Analyze log files with this [log analyzer](https://hdrhistogram.github.io/HdrHistogramJSDemo/logparser.html), inspired from the original [java/swing based log analyzer](https://github.com/HdrHistogram/HistogramLogAnalyzer).\n\n# Getting started\n\nThis library is packaged as a UMD module, hence you can use it directly\nfrom JavaScript within a browser. To do so, you can simply include HdrHistogramJS file from github's release page:\n\n```\n<script src=\"https://github.com/HdrHistogram/HdrHistogramJS/releases/download/v2.0.0/hdrhistogram.min.js\"></script>\n```\n\nThen you will have access to classes and functions of the APIs using \"hdr\" prefix.\n\nYou can also use HdrHistogramJS as a commonjs NodeJS module.\nUsing npm you can get HdrHIstogramJS with the following command:\n\n```\n  npm i hdr-histogram-js\n```\n\nOr if you like yarn better:\n\n```\n  yarn add hdr-histogram-js\n```\n\nNote for TypeScript developers: since HdrHistogramJS has been written in TypeScript, definition files are embedded, no additional task is needed to get them.\n\n# API\n\nThe examples below use ES6 syntax. You can check out demo sources\nfor examples on how to use HdrHistogram directly within a browser, you should\nnot have any surprise though.\n\n## Instantiate an histogram\n\nThe API is very close to the original Java API, there is just\na tiny addition, a simple builder function.\nHere is how to use it to instantiate a new histogram instance:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\n```\n\nIf you need more control on the memory footprint of the instantiated histogram, you can be more specific using and optionnal build request parameter:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram\n  = hdr.build(\n    {\n      bitBucketSize: 32,                // may be 8, 16, 32, 64 or 'packed'\n      autoResize: true,                 // default value is true\n      lowestDiscernibleValue: 1,        // default value is also 1\n      highestTrackableValue: 2,         // can increase up to Number.MAX_SAFE_INTEGER\n      numberOfSignificantValueDigits: 3 // Number between 1 and 5 (inclusive)\n      useWebAssembly: false             // default value is false, see WebAssembly section for details\n    }\n  );\n\n```\n\nBitBucketSize 'packed' options is available since HdrHistogramJS v1.2 . Like the Java packed implementtation, it has a very low memory footprint but it is way slower than original 'unpacked' implementations.\n\n## Record values and retrieve metrics\n\nOnce you have an histogram instance, in order to record a value you just need\nto call method recordValue() as below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\nconst histogram = hdr.build();\n...\nconst latency = 1234;\nhistogram.recordValue(latency);\n```\n\nThe number passed as a parameter is expected to be an integer. If it is not the case, the decimal part will be ignored.\n\nOnce you have recorded some values, you can get min, max, median values and of course percentiles values as shown below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst h = hdr.build();\nh.recordValue(123);\nh.recordValue(122);\nh.recordValue(1244);\n\nconsole.log(h.minNonZeroValue);           // 122\nconsole.log(h.maxValue);                  // 1244\nconsole.log(h.getMean());                 // 486.333...\nconsole.log(h.getValueAtPercentile(90));  // 1244 as well\n```\n\nIf youn need a live example you can also take alook at this [simple ping demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/ping-demo.html) or this [HdrHistogramJS on HdrHistogramJS demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/hdr-on-hdr.html).\n\nAs with the original Java version, you can also generate a textual\nrepresentation of an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordValue(25);\nhistogram.recordValue(50);\nhistogram.recordValue(75);\nconst output = histogram.outputPercentileDistribution();\n\n// output will be:\n//\n//       Value     Percentile TotalCount 1/(1-Percentile)\n//\n//      25.000 0.000000000000          1           1.00\n//  ...\n//      75.000 0.700000000000          3           3.33\n//      75.000 1.000000000000          3\n//#[Mean    =       50.000, StdDeviation   =       20.412]\n//#[Max     =       75.000, Total count    =            3]\n//#[Buckets =           43, SubBuckets     =         2048]\n\n```\n\n## Dealing with coordinated omissions\n\nIf you are recording values at a fixed rate,\nyou can correct coordinated omissions while recording values:\n\n```\nhistogram.recordValueWithExpectedInterval(1234, 100);\n```\n\nIf you prefer to apply correction afterward:\n\n```\nconst correctedHistogram\n  = histogram.copyCorrectedForCoordinatedOmission(100);\n```\n\n## Boosting performances with WebAssembly (since HdrHistogramJS v2)\n\nSince version 2, HdrHistogramJS can leverage on WebAssembly to speed up computations. Depending on the use case, the performance boost can be as high as twice as fast :)  \nTo benefit from WebAssembly performance boost, there are three things to take care of:\n\n- Bootstrap the HdrHistogramJS WebAssembly module at application startup\n- Build a WebAssembly histogram setting the useWebAssembly flag to true\n- Explicitely ask to free up memory by calling histogram.destroy() once an histogram is not needed anymore.\n\nEven if under the cover a WebAssembly histogram is very different from a regular JS based histogram, both provide exactly the same interface.  \nThe code fragment below shows how to instantiate a resizable 32 bits WebAssembly histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\n// load HdrHistogramJS WASM module\nawait initWebAssembly();\n\nconst histogram = hdr.build({ useWebAssembly: true });\n\n// you can now use your histogram the same way you would do\n// with a regular \"JS histogram\"\nhistogram.recordValue(42);\nconsole.log(histogram.outputPercentileDistribution());\n\n// free up memory once the histogram is not needed anymore,\n// otherwise WebAssembly memory footprint will keep growing\n// each time an histogram is created\nhistogram.destroy();\n\n```\n\nNote: If you want to use this feature on the browser side, along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is mandatory to bootstrap the WASM module which is compressed to save some weight.\n\n## Encode & decode\n\nYou can encode and decode base64 compressed histograms. Hence you can decode base64 compressed histograms produced by other implementations of HdrHistogram (Java, C#, Rust, ...).  \nThe code fragment below shows how to encode an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordvalue(42);\nconst encodedString = hdr.encodeIntoBase64String(histogram);\n// gives something that looks like \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\"\n```\n\nThen to decode an histogram you can use this chunk of code:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString);\n```\n\nIn the above code fragment, 'histogram' is a regular 32b bucket histogram. Other types of histograms can be specified using additionnal parameters. Below a code fragment where a WebAssembly packed histogram is used:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString, 'packed', true);\n```\n\nIf you want to use this feature along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is used for zlib compression. Using npm you should get\nit as a transitive dependency, otherwise you need to add it in\nyour html page.\n\nYou can check out [this demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/decoding-demo.html) or this [plotter on steroid](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html) to see this feature live!  \n_Be aware that only latest V2 encoding has been implemented, please raise a github issue if you need to see other versions implemented_\n\n## Histogram logs\n\nHistogramLogWriter and HistogramLogReader classes have been migrated and the API is quite similar to the one you might have used with the Java version.\nBelow a simple usage example of the HistogramLogWriter, where the log contents are appended to a string variable:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nlet buffer: string;\nconst writer = new hdr.HistogramLogWriter(content => {\n  buffer += content;\n});\nconst histogram = hdr.build();\nhistogram.startTimeStampMsec = 1234001;\nhistogram.endTimeStampMsec   = 1235123;\n\n...\n\nhistogram.recordValue(123000);\n\nwriter.outputLogFormatVersion();\nwriter.outputLegend();\nwriter.outputIntervalHistogram(histogram);\n```\n\nAs for the reading part, if you know a little bit the Java version, the following code fragment will sound familiar:\n\n```\nconst reader = new hdr.HistogramLogReader(fileContent);\nlet histogram;\nwhile ((histogram = reader.nextIntervalHistogram()) != null) {\n  // iterate on all histogram log lines\n  ...\n\n}\n```\n\n# Performance tips\n\nHdrHistogramJS stores values in memory buckets. Memory footprint of an histogram heavily depends on 3 things:\n\n- the bucket size. A bucket can take 8, 16, 32 or 64 bits of memory. 32 bits buckets is the default.\n- the precision of the histogram (i.e. the number of significant value digits). You can have up to 5 value digits, 3 value digits should be enough for most use cases.\n- the allowed range of values. You can tunned this range with constructor/builder parameters _lowestDiscernibleValue_ and _highestTrackableValue_. If you are not sure of these values, the best option is to keep flag _autoResize_ set to true.\n\nWhile tunning memory footprint, 'estimatedFootprintInBytes' histogram property can get quite useful since it gives you a clear indicator of the memory cost:\n\n```\nconst histogram = hdr.build();\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nIf you are willing some CPU cycles in favor of memory, 'packed' bucket size is highly recommended. Available since HdrHistogramJS v1.2.0, this mode enables a very effective memory compression algorithm:\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\" });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nLast but not least, unless you are targetting very old browsers or a very old NodeJS version, you should turn on WebAssembly mode. Available since HdrHistogramJS v2.0.0, this mode is often twice as fast as regular JS mode. Also all bucket size options are available with WebAssembly, including 'packed':\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\", useWebAssembly: true });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\n# Tree Shaking\n\nThe above examples use a convenient 'barrel' index file. Using this barrel, you cannot leverage on the tree shaking features of your favorite bundler. Hence the size of your JavaScript bundle may increase significantly. If you need to optimize the size of your bundle, you can import HdrHistogram modules as shown in code fragment below:\n\n```\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n\nconst histogram = new Int32Histogram(1, 2, 3);\nhistogram.autoResize = true;\n\nhistogram.recordValue(...);\n\n```\n\n# Migrating from V1 to v2\n\nFor most users, migration from HdrHistogramJS v1 to v2 should be smooth. However module paths change a little bit with v2. Hence if you were importing specific modules as described in previous section, you need to change a little bit your code:\n\n```\n// HdrHistogramJS v1\nimport Int32Histogram from \"hdr-histogram-js/Int32Histogram\"\n\n// becomes with HdrHistogramJS v2\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n```\n\n# Design & Limitations\n\nThe code is almost a direct port of the Java version.\nOptimisation based on inheritance to avoid false sharing\nmight not be relevant in JS, but I believe that keeping\nthe same code structure might be handy to keep the code up to date\nwith the Java version in the future.\n\nMain limitations comes from number support in JavaScript.\nThere is no such thing as 64b integers in JavaScript. Everything is \"number\",\nand a number is safe as an integer up to 2^53.  \nThe most annoying issue encountered during the code migration,\nis that bit operations, heavily used within original HdrHistogram,\nonly work on the first 32 bits. That means that the following JavaScript expression is evaluated as true:\n\n```\nMath.pow(2, 31) << 1 === 0   // sad but true\n```\n\nAnyway bit shift operations are not really optimized\nin most browser, so... everything related to bits have been\nconverted to good old arithmetic expressions in the process\nof converting the Java code to TypeScript.  \nWith WebAssembly and AssemblyScript things are different. HdrHistogramsJS AssemblyScript source code is closer to the original Java code since all the limitations mentioned above does not apply to WebAssembly :)\n","licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@2.0.0-beta1","dist":{"shasum":"742280624bc651410a989d13a03ec03b07a341b8","integrity":"sha512-335PYNZ56CjBVR2FEmP3uiGhuWsa216iZUnLVajLkmj2z7VWIffs7hGDKdx64AlH7T12mbBe8yIjG1s/aHOAsA==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.0-beta1.tgz","fileCount":294,"unpackedSize":5693141,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfAg94CRA9TVsSAnZWagAADQgQAJv+IjUHup0sKyEyK9eS\nIy/m2SGYrzVwJPTLNYbCFn+xJKu76rfhRCaa5NCsGlRgI0ZnXStjoqDm35K1\nZqQlC6zuIULEjtQ2vSybCsck6FQ93+Jje+adE0fUvWGD2Q+Efhpzx3uxwJm7\nUbJ09KX4wnGzg7Wpt/volYiWER38RlHFhOfwSDXQ2uMojLIOqq1TeMCDR7n4\naCPoHVtWzpBnJO9HKDuIoZDjr1QEWMJORkee1WUh7ipYKveI95Zafk9Az4kL\nS3W+YYW5WAauSMalxkQhdA9FKMFNFgMxgsai/xNBk/JAh9cU7aNdU4H+BYfF\nMfbbkmAfBjL7TUp8HsoY3/SftPkccj768qoat2P4NWZr+7s+uiUxQuYGW5dk\nyTA5ntHtXarp9GiPh17Qa/rdjJC0pXPqyjZN56EW091WolccqThTg5cbCKqy\nr0oOAxgsCgaMcXPPj5INpuefzJAmcMinX7yAdGUGBThW842EjglVbz4bM3m8\niecJnCKpxrAX9Q4sIlUVNkTE81Vm5uE3KAyqRU2weuj3aALzCFE3rZIyveqN\nPkLlFi1XY0l3aBow5+3NALNtVPxJDXR/+S7sBEuxM5jeEIL7rZR2bwluJ/GU\n9d1S0Ztcilmj7IU4vSXphK+oGWX8w0wd8URZ4evdVDx+fAPCTgMTrAaWhSxv\nbyZk\r\n=osY2\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.0-beta1_1593970551776_0.1204661957266615"},"_hasShrinkwrap":false},"2.0.0-beta2":{"name":"hdr-histogram-js","version":"2.0.0-beta2","description":"TypeScript port of HdrHistogram","main":"dist/hdrhistogram.cjs.js","module":"dist/hdrhistogram.esm.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"readmeFilename":"README.md","readme":"[![Build Status](https://travis-ci.org/HdrHistogram/HdrHistogramJS.svg?branch=master)](https://travis-ci.org/HdrHistogram/HdrHistogramJS)\n\n# HdrHistogramJS\n\nTypeScript port of HdrHistogram for NodeJS and web browsers.  \nSince version 2, HdrHistogramJS comes in 2 flavors: the good old TypeScript implementation and a new WebAssembly implementation. This new WebAssembly impelmentation leverages on AssemblyScript and brings a significant performance boost. Since some caution must be taken using this WebAssembly implementation it is not enabled by default. Check out the WebAssembly section for more details on this topic.\nMost features from Java original HdrHistogram implementations are implemented, including the following ones:\n\n- regular latency recording\n- latency recording with coordinated omissions correction\n- resizable bucket based histograms\n- memory efficient packed histograms\n- add and substract histograms\n- plain text or csv histograms outputs\n- encoding and decoding compressed histograms\n\n# Dataviz\n\nHdrHistogramJS allows to display histograms without server-side processing. Hence, within your browser, you can:\n\n- Display histograms with this slightly modified version of the [hdrhistogram plotter](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html). With this one you can use base64 v2 encoded histograms as inputs.\n- Analyze log files with this [log analyzer](https://hdrhistogram.github.io/HdrHistogramJSDemo/logparser.html), inspired from the original [java/swing based log analyzer](https://github.com/HdrHistogram/HistogramLogAnalyzer).\n\n# Getting started\n\nThis library is packaged as a UMD module, hence you can use it directly\nfrom JavaScript within a browser. To do so, you can simply include HdrHistogramJS file from github's release page:\n\n```\n<script src=\"https://github.com/HdrHistogram/HdrHistogramJS/releases/download/v2.0.0/hdrhistogram.min.js\"></script>\n```\n\nThen you will have access to classes and functions of the APIs using \"hdr\" prefix.\n\nYou can also use HdrHistogramJS as a commonjs NodeJS module.\nUsing npm you can get HdrHIstogramJS with the following command:\n\n```\n  npm i hdr-histogram-js\n```\n\nOr if you like yarn better:\n\n```\n  yarn add hdr-histogram-js\n```\n\nNote for TypeScript developers: since HdrHistogramJS has been written in TypeScript, definition files are embedded, no additional task is needed to get them.\n\n# API\n\nThe examples below use ES6 syntax. You can check out demo sources\nfor examples on how to use HdrHistogram directly within a browser, you should\nnot have any surprise though.\n\n## Instantiate an histogram\n\nThe API is very close to the original Java API, there is just\na tiny addition, a simple builder function.\nHere is how to use it to instantiate a new histogram instance:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\n```\n\nIf you need more control on the memory footprint of the instantiated histogram, you can be more specific using and optionnal build request parameter:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram\n  = hdr.build(\n    {\n      bitBucketSize: 32,                // may be 8, 16, 32, 64 or 'packed'\n      autoResize: true,                 // default value is true\n      lowestDiscernibleValue: 1,        // default value is also 1\n      highestTrackableValue: 2,         // can increase up to Number.MAX_SAFE_INTEGER\n      numberOfSignificantValueDigits: 3 // Number between 1 and 5 (inclusive)\n      useWebAssembly: false             // default value is false, see WebAssembly section for details\n    }\n  );\n\n```\n\nBitBucketSize 'packed' options is available since HdrHistogramJS v1.2 . Like the Java packed implementtation, it has a very low memory footprint but it is way slower than original 'unpacked' implementations.\n\n## Record values and retrieve metrics\n\nOnce you have an histogram instance, in order to record a value you just need\nto call method recordValue() as below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\nconst histogram = hdr.build();\n...\nconst latency = 1234;\nhistogram.recordValue(latency);\n```\n\nThe number passed as a parameter is expected to be an integer. If it is not the case, the decimal part will be ignored.\n\nOnce you have recorded some values, you can get min, max, median values and of course percentiles values as shown below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst h = hdr.build();\nh.recordValue(123);\nh.recordValue(122);\nh.recordValue(1244);\n\nconsole.log(h.minNonZeroValue);           // 122\nconsole.log(h.maxValue);                  // 1244\nconsole.log(h.getMean());                 // 486.333...\nconsole.log(h.getValueAtPercentile(90));  // 1244 as well\n```\n\nIf youn need a live example you can also take alook at this [simple ping demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/ping-demo.html) or this [HdrHistogramJS on HdrHistogramJS demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/hdr-on-hdr.html).\n\nAs with the original Java version, you can also generate a textual\nrepresentation of an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordValue(25);\nhistogram.recordValue(50);\nhistogram.recordValue(75);\nconst output = histogram.outputPercentileDistribution();\n\n// output will be:\n//\n//       Value     Percentile TotalCount 1/(1-Percentile)\n//\n//      25.000 0.000000000000          1           1.00\n//  ...\n//      75.000 0.700000000000          3           3.33\n//      75.000 1.000000000000          3\n//#[Mean    =       50.000, StdDeviation   =       20.412]\n//#[Max     =       75.000, Total count    =            3]\n//#[Buckets =           43, SubBuckets     =         2048]\n\n```\n\n## Dealing with coordinated omissions\n\nIf you are recording values at a fixed rate,\nyou can correct coordinated omissions while recording values:\n\n```\nhistogram.recordValueWithExpectedInterval(1234, 100);\n```\n\nIf you prefer to apply correction afterward:\n\n```\nconst correctedHistogram\n  = histogram.copyCorrectedForCoordinatedOmission(100);\n```\n\n## Boosting performances with WebAssembly (since HdrHistogramJS v2)\n\nSince version 2, HdrHistogramJS can leverage on WebAssembly to speed up computations. Depending on the use case, the performance boost can be as high as twice as fast :)  \nTo benefit from WebAssembly performance boost, there are three things to take care of:\n\n- Bootstrap the HdrHistogramJS WebAssembly module at application startup\n- Build a WebAssembly histogram setting the useWebAssembly flag to true\n- Explicitely ask to free up memory by calling histogram.destroy() once an histogram is not needed anymore.\n\nEven if under the cover a WebAssembly histogram is very different from a regular JS based histogram, both provide exactly the same interface.  \nThe code fragment below shows how to instantiate a resizable 32 bits WebAssembly histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\n// load HdrHistogramJS WASM module\nawait initWebAssembly();\n\nconst histogram = hdr.build({ useWebAssembly: true });\n\n// you can now use your histogram the same way you would do\n// with a regular \"JS histogram\"\nhistogram.recordValue(42);\nconsole.log(histogram.outputPercentileDistribution());\n\n// free up memory once the histogram is not needed anymore,\n// otherwise WebAssembly memory footprint will keep growing\n// each time an histogram is created\nhistogram.destroy();\n\n```\n\nNote: If you want to use this feature on the browser side, along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is mandatory to bootstrap the WASM module which is compressed to save some weight.\n\n## Encode & decode\n\nYou can encode and decode base64 compressed histograms. Hence you can decode base64 compressed histograms produced by other implementations of HdrHistogram (Java, C#, Rust, ...).  \nThe code fragment below shows how to encode an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordvalue(42);\nconst encodedString = hdr.encodeIntoBase64String(histogram);\n// gives something that looks like \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\"\n```\n\nThen to decode an histogram you can use this chunk of code:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString);\n```\n\nIn the above code fragment, 'histogram' is a regular 32b bucket histogram. Other types of histograms can be specified using additionnal parameters. Below a code fragment where a WebAssembly packed histogram is used:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString, 'packed', true);\n```\n\nIf you want to use this feature along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is used for zlib compression. Using npm you should get\nit as a transitive dependency, otherwise you need to add it in\nyour html page.\n\nYou can check out [this demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/decoding-demo.html) or this [plotter on steroid](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html) to see this feature live!  \n_Be aware that only latest V2 encoding has been implemented, please raise a github issue if you need to see other versions implemented_\n\n## Histogram logs\n\nHistogramLogWriter and HistogramLogReader classes have been migrated and the API is quite similar to the one you might have used with the Java version.\nBelow a simple usage example of the HistogramLogWriter, where the log contents are appended to a string variable:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nlet buffer: string;\nconst writer = new hdr.HistogramLogWriter(content => {\n  buffer += content;\n});\nconst histogram = hdr.build();\nhistogram.startTimeStampMsec = 1234001;\nhistogram.endTimeStampMsec   = 1235123;\n\n...\n\nhistogram.recordValue(123000);\n\nwriter.outputLogFormatVersion();\nwriter.outputLegend();\nwriter.outputIntervalHistogram(histogram);\n```\n\nAs for the reading part, if you know a little bit the Java version, the following code fragment will sound familiar:\n\n```\nconst reader = new hdr.HistogramLogReader(fileContent);\nlet histogram;\nwhile ((histogram = reader.nextIntervalHistogram()) != null) {\n  // iterate on all histogram log lines\n  ...\n\n}\n```\n\n# Performance tips\n\nHdrHistogramJS stores values in memory buckets. Memory footprint of an histogram heavily depends on 3 things:\n\n- the bucket size. A bucket can take 8, 16, 32 or 64 bits of memory. 32 bits buckets is the default.\n- the precision of the histogram (i.e. the number of significant value digits). You can have up to 5 value digits, 3 value digits should be enough for most use cases.\n- the allowed range of values. You can tunned this range with constructor/builder parameters _lowestDiscernibleValue_ and _highestTrackableValue_. If you are not sure of these values, the best option is to keep flag _autoResize_ set to true.\n\nWhile tunning memory footprint, 'estimatedFootprintInBytes' histogram property can get quite useful since it gives you a clear indicator of the memory cost:\n\n```\nconst histogram = hdr.build();\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nIf you are willing some CPU cycles in favor of memory, 'packed' bucket size is highly recommended. Available since HdrHistogramJS v1.2.0, this mode enables a very effective memory compression algorithm:\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\" });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nLast but not least, unless you are targetting very old browsers or a very old NodeJS version, you should turn on WebAssembly mode. Available since HdrHistogramJS v2.0.0, this mode is often twice as fast as regular JS mode. Also all bucket size options are available with WebAssembly, including 'packed':\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\", useWebAssembly: true });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\n# Tree Shaking\n\nThe above examples use a convenient 'barrel' index file. Using this barrel, you cannot leverage on the tree shaking features of your favorite bundler. Hence the size of your JavaScript bundle may increase significantly. If you need to optimize the size of your bundle, you can import HdrHistogram modules as shown in code fragment below:\n\n```\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n\nconst histogram = new Int32Histogram(1, 2, 3);\nhistogram.autoResize = true;\n\nhistogram.recordValue(...);\n\n```\n\n# Migrating from V1 to v2\n\nFor most users, migration from HdrHistogramJS v1 to v2 should be smooth. However since HdrHistogramJS v2 does not stick anymore with HdrHistogram Java API, you might run into some breaking changes.  \nPrior to v2, _hdr.build()_ was returning an _AbstractHistogram_ instance. _AbstractHistogram_ does not exist anymore and has been replaced by an _Histogram_ interface. Most methods from _AbstractHistogram_ still exist in new _Histogram_, however getter methods such as _getMean()_ or getTotalCount()\\_ have been replaced by JS properties:\n\n```\n// HdrHistogramJS v1\nconst histogram: AbstractHistogram = hdr.build();\nconst statistics = {\n  count: histogram.getTotalCount(),\n  mean: histogram.getMean(),\n  p99: histogram.getValueAtPercentile(99),\n}\n\n// HdrHistogramJS v2\nconst histogram: Histogram = hdr.build();\nconst statistics = {\n  count: histogram.totalCount,\n  mean: histogram.mean,\n  p99: histogram.getValueAtPercentile(99),\n}\n```\n\nModule paths change a little bit with v2. Hence if you were importing specific modules as described in tree shaking section, you need to change a little bit your code as below:\n\n```\n// HdrHistogramJS v1\nimport AbstractHistogram from \"hdr-histogram-js/AbstractHistogram\"\nimport Int32Histogram from \"hdr-histogram-js/Int32Histogram\"\n\n// becomes with HdrHistogramJS v2\nimport Histogram from \"hdr-histogram-js/dist/Histogram\"\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n```\n\n# Design & Limitations\n\nThe code is almost a direct port of the Java version.\nOptimisation based on inheritance to avoid false sharing\nmight not be relevant in JS, but I believe that keeping\nthe same code structure might be handy to keep the code up to date\nwith the Java version in the future.\n\nMain limitations comes from number support in JavaScript.\nThere is no such thing as 64b integers in JavaScript. Everything is \"number\",\nand a number is safe as an integer up to 2^53.  \nThe most annoying issue encountered during the code migration,\nis that bit operations, heavily used within original HdrHistogram,\nonly work on the first 32 bits. That means that the following JavaScript expression is evaluated as true:\n\n```\nMath.pow(2, 31) << 1 === 0   // sad but true\n```\n\nAnyway bit shift operations are not really optimized\nin most browser, so... everything related to bits have been\nconverted to good old arithmetic expressions in the process\nof converting the Java code to TypeScript.  \nWith WebAssembly and AssemblyScript things are different. HdrHistogramsJS AssemblyScript source code is closer to the original Java code since all the limitations mentioned above does not apply to WebAssembly :)\n","licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@2.0.0-beta2","dist":{"shasum":"3b71355fe85a574721c6f5ecf764e52be64351c5","integrity":"sha512-vVx37E8a4D9LPwITyUK2zJEc1C7tBFDrSjTEBCDgk6U7r3AhG1vBxff7vHqzud4dnBDfPPhGmjs7pDLjHbP57A==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.0-beta2.tgz","fileCount":294,"unpackedSize":5516386,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfB3JtCRA9TVsSAnZWagAAjYIP/irukUmymTBfPfz0Sc1y\nlTKVJxG2ZYnlLHqZUuA4TpHT5keYLyYuzdqQ3dd91rnrxP9Zlh8fOFmsDZDk\neFLXH9T+7ACeo5Ei0Jr81fgdzbs0WQlgHhJSHV0Homl3S1P5gBFqQJvOQ1+r\nXhnZljw+HyqDjGQRCreMdToRAtGbGhSoH+J3ierEHQS1rj+rQK2NgKadfII/\nbXCbQ0kxPEXxnen2cWcUaYlWl3kgO4OU1yrHDDIzy5jjAOd2/lAlxMeAcVey\nkbz8VYGa+0qoQKHRMQi4h9QlllbiPGOzgT6wHJh8MvG24TxeYT9eRzvbeEZd\nMRMrmIYgmHP4dy99UxXEIF7X0AQ6wpXf7aq3UrTSKSEWiK7IJa+2iRhuWWw3\nq+NFmUxQbNP91g741T/pJmsJf/PhZOswBNMjiSkCHVGVqe0rjFkJA7F6EyA/\nIqesljfKZ6hPTSpFxHxV4XjQfo3J31MuZhH/4k/jtsXD3Mh+WCP1P1Go4NDN\n4aWr8lpmSITTqqpotUMeJOhDcacemqwkag2tCSzaCOkQnrndyuKlROJPgqG8\nlP1XlU5UciMCkIDuLp485DuybAA9GU8TYCNJk7MkK8W9K+IuN2PvgzC/unw6\n/GE/chzaY8H8Om5/fMUb/JKPbp+P7K6UipKqOlMEsGHyQRxvmxoxoYFURr2M\nkoEe\r\n=wnID\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.0-beta2_1594323565169_0.3063998764172755"},"_hasShrinkwrap":false},"2.0.0-beta3":{"name":"hdr-histogram-js","version":"2.0.0-beta3","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"readmeFilename":"README.md","readme":"[![Build Status](https://travis-ci.org/HdrHistogram/HdrHistogramJS.svg?branch=master)](https://travis-ci.org/HdrHistogram/HdrHistogramJS)\n\n# HdrHistogramJS\n\nTypeScript port of HdrHistogram for NodeJS and web browsers.  \nSince version 2, HdrHistogramJS comes in 2 flavors: the good old TypeScript implementation and a new WebAssembly implementation. This new WebAssembly impelmentation leverages on AssemblyScript and brings a significant performance boost. Since some caution must be taken using this WebAssembly implementation it is not enabled by default. Check out the WebAssembly section for more details on this topic.\nMost features from Java original HdrHistogram implementations are implemented, including the following ones:\n\n- regular latency recording\n- latency recording with coordinated omissions correction\n- resizable bucket based histograms\n- memory efficient packed histograms\n- add and substract histograms\n- plain text or csv histograms outputs\n- encoding and decoding compressed histograms\n\n# Dataviz\n\nHdrHistogramJS allows to display histograms without server-side processing. Hence, within your browser, you can:\n\n- Display histograms with this slightly modified version of the [hdrhistogram plotter](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html). With this one you can use base64 v2 encoded histograms as inputs.\n- Analyze log files with this [log analyzer](https://hdrhistogram.github.io/HdrHistogramJSDemo/logparser.html), inspired from the original [java/swing based log analyzer](https://github.com/HdrHistogram/HistogramLogAnalyzer).\n\n# Getting started\n\nThis library is packaged as a UMD module, hence you can use it directly\nfrom JavaScript within a browser. To do so, you can simply include HdrHistogramJS file from github's release page:\n\n```\n<script src=\"https://github.com/HdrHistogram/HdrHistogramJS/releases/download/v2.0.0/hdrhistogram.min.js\"></script>\n```\n\nThen you will have access to classes and functions of the APIs using \"hdr\" prefix.\n\nYou can also use HdrHistogramJS as a commonjs NodeJS module.\nUsing npm you can get HdrHIstogramJS with the following command:\n\n```\n  npm i hdr-histogram-js\n```\n\nOr if you like yarn better:\n\n```\n  yarn add hdr-histogram-js\n```\n\nNote for TypeScript developers: since HdrHistogramJS has been written in TypeScript, definition files are embedded, no additional task is needed to get them.\n\n# API\n\nThe examples below use ES6 syntax. You can check out demo sources\nfor examples on how to use HdrHistogram directly within a browser, you should\nnot have any surprise though.\n\n## Instantiate an histogram\n\nThe API is very close to the original Java API, there is just\na tiny addition, a simple builder function.\nHere is how to use it to instantiate a new histogram instance:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\n```\n\nIf you need more control on the memory footprint of the instantiated histogram, you can be more specific using and optionnal build request parameter:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram\n  = hdr.build(\n    {\n      bitBucketSize: 32,                // may be 8, 16, 32, 64 or 'packed'\n      autoResize: true,                 // default value is true\n      lowestDiscernibleValue: 1,        // default value is also 1\n      highestTrackableValue: 2,         // can increase up to Number.MAX_SAFE_INTEGER\n      numberOfSignificantValueDigits: 3 // Number between 1 and 5 (inclusive)\n      useWebAssembly: false             // default value is false, see WebAssembly section for details\n    }\n  );\n\n```\n\nBitBucketSize 'packed' options is available since HdrHistogramJS v1.2 . Like the Java packed implementtation, it has a very low memory footprint but it is way slower than original 'unpacked' implementations.\n\n## Record values and retrieve metrics\n\nOnce you have an histogram instance, in order to record a value you just need\nto call method recordValue() as below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\nconst histogram = hdr.build();\n...\nconst latency = 1234;\nhistogram.recordValue(latency);\n```\n\nThe number passed as a parameter is expected to be an integer. If it is not the case, the decimal part will be ignored.\n\nOnce you have recorded some values, you can get min, max, median values and of course percentiles values as shown below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst h = hdr.build();\nh.recordValue(123);\nh.recordValue(122);\nh.recordValue(1244);\n\nconsole.log(h.minNonZeroValue);           // 122\nconsole.log(h.maxValue);                  // 1244\nconsole.log(h.getMean());                 // 486.333...\nconsole.log(h.getValueAtPercentile(90));  // 1244 as well\n```\n\nIf youn need a live example you can also take alook at this [simple ping demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/ping-demo.html) or this [HdrHistogramJS on HdrHistogramJS demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/hdr-on-hdr.html).\n\nAs with the original Java version, you can also generate a textual\nrepresentation of an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordValue(25);\nhistogram.recordValue(50);\nhistogram.recordValue(75);\nconst output = histogram.outputPercentileDistribution();\n\n// output will be:\n//\n//       Value     Percentile TotalCount 1/(1-Percentile)\n//\n//      25.000 0.000000000000          1           1.00\n//  ...\n//      75.000 0.700000000000          3           3.33\n//      75.000 1.000000000000          3\n//#[Mean    =       50.000, StdDeviation   =       20.412]\n//#[Max     =       75.000, Total count    =            3]\n//#[Buckets =           43, SubBuckets     =         2048]\n\n```\n\n## Dealing with coordinated omissions\n\nIf you are recording values at a fixed rate,\nyou can correct coordinated omissions while recording values:\n\n```\nhistogram.recordValueWithExpectedInterval(1234, 100);\n```\n\nIf you prefer to apply correction afterward:\n\n```\nconst correctedHistogram\n  = histogram.copyCorrectedForCoordinatedOmission(100);\n```\n\n## Boosting performances with WebAssembly (since HdrHistogramJS v2)\n\nSince version 2, HdrHistogramJS can leverage on WebAssembly to speed up computations. Depending on the use case, the performance boost can be as high as twice as fast :)  \nTo benefit from WebAssembly performance boost, there are three things to take care of:\n\n- Bootstrap the HdrHistogramJS WebAssembly module at application startup\n- Build a WebAssembly histogram setting the useWebAssembly flag to true\n- Explicitely ask to free up memory by calling histogram.destroy() once an histogram is not needed anymore.\n\nEven if under the cover a WebAssembly histogram is very different from a regular JS based histogram, both provide exactly the same interface.  \nThe code fragment below shows how to instantiate a resizable 32 bits WebAssembly histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\n// load HdrHistogramJS WASM module\nawait initWebAssembly();\n\nconst histogram = hdr.build({ useWebAssembly: true });\n\n// you can now use your histogram the same way you would do\n// with a regular \"JS histogram\"\nhistogram.recordValue(42);\nconsole.log(histogram.outputPercentileDistribution());\n\n// free up memory once the histogram is not needed anymore,\n// otherwise WebAssembly memory footprint will keep growing\n// each time an histogram is created\nhistogram.destroy();\n\n```\n\nNote: If you want to use this feature on the browser side, along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is mandatory to bootstrap the WASM module which is compressed to save some weight.\n\n## Encode & decode\n\nYou can encode and decode base64 compressed histograms. Hence you can decode base64 compressed histograms produced by other implementations of HdrHistogram (Java, C#, Rust, ...).  \nThe code fragment below shows how to encode an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordvalue(42);\nconst encodedString = hdr.encodeIntoBase64String(histogram);\n// gives something that looks like \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\"\n```\n\nThen to decode an histogram you can use this chunk of code:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString);\n```\n\nIn the above code fragment, 'histogram' is a regular 32b bucket histogram. Other types of histograms can be specified using additionnal parameters. Below a code fragment where a WebAssembly packed histogram is used:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString, 'packed', true);\n```\n\nIf you want to use this feature along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is used for zlib compression. Using npm you should get\nit as a transitive dependency, otherwise you need to add it in\nyour html page.\n\nYou can check out [this demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/decoding-demo.html) or this [plotter on steroid](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html) to see this feature live!  \n_Be aware that only latest V2 encoding has been implemented, please raise a github issue if you need to see other versions implemented_\n\n## Histogram logs\n\nHistogramLogWriter and HistogramLogReader classes have been migrated and the API is quite similar to the one you might have used with the Java version.\nBelow a simple usage example of the HistogramLogWriter, where the log contents are appended to a string variable:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nlet buffer: string;\nconst writer = new hdr.HistogramLogWriter(content => {\n  buffer += content;\n});\nconst histogram = hdr.build();\nhistogram.startTimeStampMsec = 1234001;\nhistogram.endTimeStampMsec   = 1235123;\n\n...\n\nhistogram.recordValue(123000);\n\nwriter.outputLogFormatVersion();\nwriter.outputLegend();\nwriter.outputIntervalHistogram(histogram);\n```\n\nAs for the reading part, if you know a little bit the Java version, the following code fragment will sound familiar:\n\n```\nconst reader = new hdr.HistogramLogReader(fileContent);\nlet histogram;\nwhile ((histogram = reader.nextIntervalHistogram()) != null) {\n  // iterate on all histogram log lines\n  ...\n\n}\n```\n\n# Performance tips\n\nHdrHistogramJS stores values in memory buckets. Memory footprint of an histogram heavily depends on 3 things:\n\n- the bucket size. A bucket can take 8, 16, 32 or 64 bits of memory. 32 bits buckets is the default.\n- the precision of the histogram (i.e. the number of significant value digits). You can have up to 5 value digits, 3 value digits should be enough for most use cases.\n- the allowed range of values. You can tunned this range with constructor/builder parameters _lowestDiscernibleValue_ and _highestTrackableValue_. If you are not sure of these values, the best option is to keep flag _autoResize_ set to true.\n\nWhile tunning memory footprint, 'estimatedFootprintInBytes' histogram property can get quite useful since it gives you a clear indicator of the memory cost:\n\n```\nconst histogram = hdr.build();\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nIf you are willing some CPU cycles in favor of memory, 'packed' bucket size is highly recommended. Available since HdrHistogramJS v1.2.0, this mode enables a very effective memory compression algorithm:\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\" });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nLast but not least, unless you are targetting very old browsers or a very old NodeJS version, you should turn on WebAssembly mode. Available since HdrHistogramJS v2.0.0, this mode is often twice as fast as regular JS mode. Also all bucket size options are available with WebAssembly, including 'packed':\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\", useWebAssembly: true });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\n# Tree Shaking\n\nThe above examples use a convenient 'barrel' index file. Using this barrel, you cannot leverage on the tree shaking features of your favorite bundler. Hence the size of your JavaScript bundle may increase significantly. If you need to optimize the size of your bundle, you can import HdrHistogram modules as shown in code fragment below:\n\n```\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n\nconst histogram = new Int32Histogram(1, 2, 3);\nhistogram.autoResize = true;\n\nhistogram.recordValue(...);\n\n```\n\n# Migrating from V1 to v2\n\nFor most users, migration from HdrHistogramJS v1 to v2 should be smooth. However since HdrHistogramJS v2 does not stick anymore with HdrHistogram Java API, you might run into some breaking changes.  \nPrior to v2, _hdr.build()_ was returning an _AbstractHistogram_ instance. _AbstractHistogram_ does not exist anymore and has been replaced by an _Histogram_ interface. Most methods from _AbstractHistogram_ still exist in new _Histogram_, however getter methods such as _getMean()_ or getTotalCount()\\_ have been replaced by JS properties:\n\n```\n// HdrHistogramJS v1\nconst histogram: AbstractHistogram = hdr.build();\nconst statistics = {\n  count: histogram.getTotalCount(),\n  mean: histogram.getMean(),\n  p99: histogram.getValueAtPercentile(99),\n}\n\n// HdrHistogramJS v2\nconst histogram: Histogram = hdr.build();\nconst statistics = {\n  count: histogram.totalCount,\n  mean: histogram.mean,\n  p99: histogram.getValueAtPercentile(99),\n}\n```\n\nModule paths change a little bit with v2. Hence if you were importing specific modules as described in tree shaking section, you need to change a little bit your code as below:\n\n```\n// HdrHistogramJS v1\nimport AbstractHistogram from \"hdr-histogram-js/AbstractHistogram\"\nimport Int32Histogram from \"hdr-histogram-js/Int32Histogram\"\n\n// becomes with HdrHistogramJS v2\nimport Histogram from \"hdr-histogram-js/dist/Histogram\"\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n```\n\n# Design & Limitations\n\nThe code is almost a direct port of the Java version.\nOptimisation based on inheritance to avoid false sharing\nmight not be relevant in JS, but I believe that keeping\nthe same code structure might be handy to keep the code up to date\nwith the Java version in the future.\n\nMain limitations comes from number support in JavaScript.\nThere is no such thing as 64b integers in JavaScript. Everything is \"number\",\nand a number is safe as an integer up to 2^53.  \nThe most annoying issue encountered during the code migration,\nis that bit operations, heavily used within original HdrHistogram,\nonly work on the first 32 bits. That means that the following JavaScript expression is evaluated as true:\n\n```\nMath.pow(2, 31) << 1 === 0   // sad but true\n```\n\nAnyway bit shift operations are not really optimized\nin most browser, so... everything related to bits have been\nconverted to good old arithmetic expressions in the process\nof converting the Java code to TypeScript.  \nWith WebAssembly and AssemblyScript things are different. HdrHistogramsJS AssemblyScript source code is closer to the original Java code since all the limitations mentioned above does not apply to WebAssembly :)\n","licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@2.0.0-beta3","dist":{"shasum":"29c7e5be14b76e7ed6f5b4f4cbc29eb67165e747","integrity":"sha512-ajPbl7jIWOVjq/FCWUOq9mSvhTnNYMfPK9MQ6a0jYWWDMRD5A+O/p9Puz8XkTvayFB/1a3XVFj8svnnA9KFMJQ==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.0-beta3.tgz","fileCount":292,"unpackedSize":5166884,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfB3U/CRA9TVsSAnZWagAA5ecP/1VI7iSuhJuW9Vw3KyCe\n+EnVCb9ohosMbVEFlWMwzsdAgLLvV19k2izpa6BSavtKtISRP99uTYHCWkW0\nbvgYVQdAXvBgXTknBxSih+/x34srbD+DAVnynplGSlI6AUcbl1sF1Zqh9qH4\nizOmdI2p0AR/3yUZkiPXK3fpgMqeeEdfAvvpUSS8A8M03NwPdZIKwZZCaCkl\nq0jEDW3QpsmqQZM0bJjiHDgQ99FLYC+AhOz8ui7cMvEhHR+ojyWsB+9zNQCz\nJlwo44o5O039rREBLi4MzgWLcPuCs2Zu4z9NMcTajoxVinF95aT8aYgjCjqU\nU8waUGdQuY8OztYPGaKaWNszMVaPtBVfs9X2tuXk1Pk8/SsuXAYTohTPPFV0\n7CfxQ8X4CBHQa6KwYTpcUXHXEesO08VEyhU2/3wOgIIa5+GX1khPN0QkCodc\nbN9Tn6Tst6HFYxEVTLC6lgge9yfDb4EAf5PCLKs01Mmy/ipI0f1x72cp/bHf\nMR2oCrk8QAQCEE/WrqRPkgPpGDIhgkuRlOHKohioOtV0ToE7gTZuEpxuOhEN\nfqcdq1IwyVmXUx3ej/tTSgtv8YHZY+ZLPFbzJGdLnFMEtz21lw0eRj/EgLqj\ncNQWZ73TpsxeMk2T2COtpC/9lfdaAj6CBM+chiKHqvHaMv/93tDUI1E+l7Rp\nbTfP\r\n=pZkQ\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.0-beta3_1594324287408_0.5646274656443864"},"_hasShrinkwrap":false},"2.0.0-beta4":{"name":"hdr-histogram-js","version":"2.0.0-beta4","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"readmeFilename":"README.md","readme":"[![Build Status](https://travis-ci.org/HdrHistogram/HdrHistogramJS.svg?branch=master)](https://travis-ci.org/HdrHistogram/HdrHistogramJS)\n\n# HdrHistogramJS\n\nTypeScript port of HdrHistogram for NodeJS and web browsers.  \nSince version 2, HdrHistogramJS comes in 2 flavors: the good old TypeScript implementation and a new WebAssembly implementation. This new WebAssembly impelmentation leverages on AssemblyScript and brings a significant performance boost. Since some caution must be taken using this WebAssembly implementation it is not enabled by default. Check out the WebAssembly section for more details on this topic.\nMost features from Java original HdrHistogram implementations are implemented, including the following ones:\n\n- regular latency recording\n- latency recording with coordinated omissions correction\n- resizable bucket based histograms\n- memory efficient packed histograms\n- add and substract histograms\n- plain text or csv histograms outputs\n- encoding and decoding compressed histograms\n\n# Dataviz\n\nHdrHistogramJS allows to display histograms without server-side processing. Hence, within your browser, you can:\n\n- Display histograms with this slightly modified version of the [hdrhistogram plotter](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html). With this one you can use base64 v2 encoded histograms as inputs.\n- Analyze log files with this [log analyzer](https://hdrhistogram.github.io/HdrHistogramJSDemo/logparser.html), inspired from the original [java/swing based log analyzer](https://github.com/HdrHistogram/HistogramLogAnalyzer).\n\n# Getting started\n\nThis library is packaged as a UMD module, hence you can use it directly\nfrom JavaScript within a browser. To do so, you can simply include HdrHistogramJS file from github's release page:\n\n```\n<script src=\"https://github.com/HdrHistogram/HdrHistogramJS/releases/download/v2.0.0-beta4/hdrhistogram.umd.js\"></script>\n```\n\nThen you will have access to classes and functions of the APIs using \"hdr\" prefix.\n\nYou can also use HdrHistogramJS as a commonjs NodeJS module.\nUsing npm you can get HdrHIstogramJS with the following command:\n\n```\n  npm i hdr-histogram-js@2.0.0-beta4\n```\n\nOr if you like yarn better:\n\n```\n  yarn add hdr-histogram-js@2.0.0-beta4\n```\n\nNote for TypeScript developers: since HdrHistogramJS has been written in TypeScript, definition files are embedded, no additional task is needed to get them.\n\n# API\n\nThe examples below use ES6 syntax. You can check out demo sources\nfor examples on how to use HdrHistogram directly within a browser, you should\nnot have any surprise though.\n\n## Instantiate an histogram\n\nThe API is very close to the original Java API, there is just\na tiny addition, a simple builder function.\nHere is how to use it to instantiate a new histogram instance:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\n```\n\nIf you need more control on the memory footprint of the instantiated histogram, you can be more specific using and optionnal build request parameter:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram\n  = hdr.build(\n    {\n      bitBucketSize: 32,                // may be 8, 16, 32, 64 or 'packed'\n      autoResize: true,                 // default value is true\n      lowestDiscernibleValue: 1,        // default value is also 1\n      highestTrackableValue: 2,         // can increase up to Number.MAX_SAFE_INTEGER\n      numberOfSignificantValueDigits: 3 // Number between 1 and 5 (inclusive)\n      useWebAssembly: false             // default value is false, see WebAssembly section for details\n    }\n  );\n\n```\n\nBitBucketSize 'packed' options is available since HdrHistogramJS v1.2 . Like the Java packed implementtation, it has a very low memory footprint but it is way slower than original 'unpacked' implementations.\n\n## Record values and retrieve metrics\n\nOnce you have an histogram instance, in order to record a value you just need\nto call method recordValue() as below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\nconst histogram = hdr.build();\n...\nconst latency = 1234;\nhistogram.recordValue(latency);\n```\n\nThe number passed as a parameter is expected to be an integer. If it is not the case, the decimal part will be ignored.\n\nOnce you have recorded some values, you can get min, max, median values and of course percentiles values as shown below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst h = hdr.build();\nh.recordValue(123);\nh.recordValue(122);\nh.recordValue(1244);\n\nconsole.log(h.minNonZeroValue);           // 122\nconsole.log(h.maxValue);                  // 1244\nconsole.log(h.getMean());                 // 486.333...\nconsole.log(h.getValueAtPercentile(90));  // 1244 as well\n```\n\nIf youn need a live example you can also take alook at this [simple ping demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/ping-demo.html) or this [HdrHistogramJS on HdrHistogramJS demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/hdr-on-hdr.html).\n\nAs with the original Java version, you can also generate a textual\nrepresentation of an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordValue(25);\nhistogram.recordValue(50);\nhistogram.recordValue(75);\nconst output = histogram.outputPercentileDistribution();\n\n// output will be:\n//\n//       Value     Percentile TotalCount 1/(1-Percentile)\n//\n//      25.000 0.000000000000          1           1.00\n//  ...\n//      75.000 0.700000000000          3           3.33\n//      75.000 1.000000000000          3\n//#[Mean    =       50.000, StdDeviation   =       20.412]\n//#[Max     =       75.000, Total count    =            3]\n//#[Buckets =           43, SubBuckets     =         2048]\n\n```\n\n## Dealing with coordinated omissions\n\nIf you are recording values at a fixed rate,\nyou can correct coordinated omissions while recording values:\n\n```\nhistogram.recordValueWithExpectedInterval(1234, 100);\n```\n\nIf you prefer to apply correction afterward:\n\n```\nconst correctedHistogram\n  = histogram.copyCorrectedForCoordinatedOmission(100);\n```\n\n## Boosting performances with WebAssembly (since HdrHistogramJS v2)\n\nSince version 2, HdrHistogramJS leverages on WebAssembly to speed up computations. Depending on the use case, the performance boost can be as high as twice as fast :)  \nEverything has been done to make your life easier when using HdrHistogramJS WebAssembly impelmentation, but since the usage a little bit different WebAssembly is not enabled by default.  \nTo benefit from WebAssembly performance boost, there are three things to take care of:\n\n- Bootstrap the HdrHistogramJS WebAssembly module at application startup\n- Build a WebAssembly histogram setting the useWebAssembly flag to true\n- Explicitely ask to free up memory by calling histogram.destroy() once an histogram is not needed anymore.\n\nEven if under the cover a WebAssembly histogram is very different from a regular JS based histogram, both provide exactly the same interface.  \nThe code fragment below shows how to instantiate a resizable 32 bits WebAssembly histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\n// load HdrHistogramJS WASM module\nawait initWebAssembly();\n\nconst histogram = hdr.build({ useWebAssembly: true });\n\n// you can now use your histogram the same way you would do\n// with a regular \"JS histogram\"\nhistogram.recordValue(42);\nconsole.log(histogram.outputPercentileDistribution());\n\n// free up memory once the histogram is not needed anymore,\n// otherwise WebAssembly memory footprint will keep growing\n// each time an histogram is created\nhistogram.destroy();\n\n```\n\nNote: If you want to use this feature on the browser side, along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is mandatory to bootstrap the WASM module which is compressed to save some weight.\n\n## Encode & decode\n\nYou can encode and decode base64 compressed histograms. Hence you can decode base64 compressed histograms produced by other implementations of HdrHistogram (Java, C#, Rust, ...).  \nThe code fragment below shows how to encode an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordvalue(42);\nconst encodedString = hdr.encodeIntoBase64String(histogram);\n// gives something that looks like \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\"\n```\n\nThen to decode an histogram you can use this chunk of code:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString);\n```\n\nIn the above code fragment, 'histogram' is a regular 32b bucket histogram. Other types of histograms can be specified using additionnal parameters. Below a code fragment where a WebAssembly packed histogram is used:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString, 'packed', true);\n```\n\nIf you want to use this feature along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is used for zlib compression. Using npm you should get\nit as a transitive dependency, otherwise you need to add it in\nyour html page.\n\nYou can check out [this demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/decoding-demo.html) or this [plotter on steroid](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html) to see this feature live!  \n_Be aware that only latest V2 encoding has been implemented, please raise a github issue if you need to see other versions implemented_\n\n## Histogram logs\n\nHistogramLogWriter and HistogramLogReader classes have been migrated and the API is quite similar to the one you might have used with the Java version.\nBelow a simple usage example of the HistogramLogWriter, where the log contents are appended to a string variable:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nlet buffer: string;\nconst writer = new hdr.HistogramLogWriter(content => {\n  buffer += content;\n});\nconst histogram = hdr.build();\nhistogram.startTimeStampMsec = 1234001;\nhistogram.endTimeStampMsec   = 1235123;\n\n...\n\nhistogram.recordValue(123000);\n\nwriter.outputLogFormatVersion();\nwriter.outputLegend();\nwriter.outputIntervalHistogram(histogram);\n```\n\nAs for the reading part, if you know a little bit the Java version, the following code fragment will sound familiar:\n\n```\nconst reader = new hdr.HistogramLogReader(fileContent);\nlet histogram;\nwhile ((histogram = reader.nextIntervalHistogram()) != null) {\n  // iterate on all histogram log lines\n  ...\n\n}\n```\n\n# Performance tips\n\nHdrHistogramJS stores values in memory buckets. Memory footprint of an histogram heavily depends on 3 things:\n\n- the bucket size. A bucket can take 8, 16, 32 or 64 bits of memory. 32 bits buckets is the default.\n- the precision of the histogram (i.e. the number of significant value digits). You can have up to 5 value digits, 3 value digits should be enough for most use cases.\n- the allowed range of values. You can tunned this range with constructor/builder parameters _lowestDiscernibleValue_ and _highestTrackableValue_. If you are not sure of these values, the best option is to keep flag _autoResize_ set to true.\n\nWhile tunning memory footprint, 'estimatedFootprintInBytes' histogram property can get quite useful since it gives you a clear indicator of the memory cost:\n\n```\nconst histogram = hdr.build();\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nIf you are willing some CPU cycles in favor of memory, 'packed' bucket size is highly recommended. Available since HdrHistogramJS v1.2.0, this mode enables a very effective memory compression algorithm:\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\" });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nLast but not least, unless you are targetting very old browsers or a very old NodeJS version, you should turn on WebAssembly mode. Available since HdrHistogramJS v2.0.0, this mode is often twice as fast as regular JS mode. Also all bucket size options are available with WebAssembly, including 'packed':\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\", useWebAssembly: true });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\n# Tree Shaking\n\nThe above examples use a convenient 'barrel' index file. Using this barrel, you cannot leverage on the tree shaking features of your favorite bundler. Hence the size of your JavaScript bundle may increase significantly. If you need to optimize the size of your bundle, you can import HdrHistogram modules as shown in code fragment below:\n\n```\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n\nconst histogram = new Int32Histogram(1, 2, 3);\nhistogram.autoResize = true;\n\nhistogram.recordValue(...);\n\n```\n\n# Migrating from v1 to v2\n\nFor most users, migration from HdrHistogramJS v1 to v2 should be smooth. However since HdrHistogramJS v2 does not stick anymore with HdrHistogram Java API, you might run into some breaking changes.  \nPrior to v2, _hdr.build()_ was returning an _AbstractHistogram_ instance. _AbstractHistogram_ does not exist anymore and has been replaced by an _Histogram_ interface. Most methods from _AbstractHistogram_ still exist in new _Histogram_, however getter methods such as _getMean()_ or _getTotalCount()_ have been replaced by JS properties:\n\n```\n// HdrHistogramJS v1\nconst histogram: AbstractHistogram = hdr.build();\nconst statistics = {\n  count: histogram.getTotalCount(),\n  mean: histogram.getMean(),\n  p99: histogram.getValueAtPercentile(99),\n}\n\n// becomes with HdrHistogramJS v2\nconst histogram: Histogram = hdr.build();\nconst statistics = {\n  count: histogram.totalCount,\n  mean: histogram.mean,\n  p99: histogram.getValueAtPercentile(99),\n}\n```\n\nModule paths also change a little bit with v2. Hence if you were importing specific modules as described in the tree shaking section, you need to change a little bit your code as below:\n\n```\n// HdrHistogramJS v1\nimport AbstractHistogram from \"hdr-histogram-js/AbstractHistogram\"\nimport Int32Histogram from \"hdr-histogram-js/Int32Histogram\"\n\n// becomes with HdrHistogramJS v2\nimport Histogram from \"hdr-histogram-js/dist/Histogram\"\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n```\n\n# Design & Limitations\n\nThe code is almost a direct port of the Java version.\nOptimisation based on inheritance to avoid false sharing\nmight not be relevant in JS, but I believe that keeping\nthe same code structure might be handy to keep the code up to date\nwith the Java version in the future.\n\nMain limitations comes from number support in JavaScript.\nThere is no such thing as 64b integers in JavaScript. Everything is \"number\",\nand a number is safe as an integer up to 2^53.  \nThe most annoying issue encountered during the code migration,\nis that bit operations, heavily used within original HdrHistogram,\nonly work on the first 32 bits. That means that the following JavaScript expression is evaluated as true:\n\n```\nMath.pow(2, 31) << 1 === 0   // sad but true\n```\n\nAnyway bit shift operations are not really optimized\nin most browser, so... everything related to bits have been\nconverted to good old arithmetic expressions in the process\nof converting the Java code to TypeScript.  \nWith WebAssembly and AssemblyScript things are different. HdrHistogramsJS AssemblyScript source code is closer to the original Java code since all the limitations mentioned above does not apply to WebAssembly :)\n","licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@2.0.0-beta4","dist":{"shasum":"a4cae363ed44ef2ceca19ddff5bec01195df0569","integrity":"sha512-bH8GZkDQ++ZSalYfABQ1rCXgKoC3i+uDQpeSo5joUV7Wm9Srs0pWZazqmYMaMFc49L3qZJCxEppietYBHPszvQ==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.0-beta4.tgz","fileCount":294,"unpackedSize":5176087,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfCJ+mCRA9TVsSAnZWagAAGXMQAILZnDTJdWDTDrD4++eu\nBMV/LSRDHpAu/vCMBs+3U96z0PA/G0rdLwTa9gzShGOnFAo+PBSsKaGf9Kl3\nEdG6+stUYHLv3BrDxIOloXNQ5m/CU1vqAe9i69yV3zuqeMouxlCNXHo9eZSh\nhFRC7X25e29nRXXowlNKgLvTInbzngvRHgf0xhvK3YWqYmTK2nTp6oDbVFsO\nL++SsyaY+4ahhYj1FHC1VAimQjmdEWa1KaFrNAGlualrMV2bnu1LSTCviuiX\nox3E3fG+GvKXF4fQjl+qZVTJCgJc5IzsgPZPh5LMGDSn2EGCkIQO9UHjtsBP\nWXqrKO3IqM4bkJLvhvBACuk9fSkf56WVEHPHAX/9+sH6MCtyMlDp2H/TqrWl\n4XuFEIZh8URncKtNuKigNBvid3z1ih+xj0Dgn1o7mbD4NeW9gi9Blfw6advf\nN+QC2PeXf4nonAW+xNqZW/dEi5odEEsHwIQKBk5wbncUPyRCGb+XIct0M/O2\nvnL+sUiA0QitOosKMf6cj8uMIqBhYbDhwlJ68TqwMHYYatdbWUmVI7weLRTC\n6Q+uCflLqwYyZSSl6B6xxc7YMFG8kYxJgl7XeC0SYAzeLeprAOX+0xi2posu\ntWkKKEM1mR6TXPi0xLxawDjXhxpyf7rqxIbYYaXrk7C/8am69OB3AQIXo+cY\nDRUf\r\n=5W92\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.0-beta4_1594400675138_0.2823473292451151"},"_hasShrinkwrap":false},"2.0.0-beta5":{"name":"hdr-histogram-js","version":"2.0.0-beta5","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"readmeFilename":"README.md","readme":"[![Build Status](https://travis-ci.org/HdrHistogram/HdrHistogramJS.svg?branch=master)](https://travis-ci.org/HdrHistogram/HdrHistogramJS)\n\n# HdrHistogramJS\n\nTypeScript port of HdrHistogram for NodeJS and web browsers.  \nSince version 2, HdrHistogramJS comes in 2 flavors: the good old TypeScript implementation and a new WebAssembly implementation. This new WebAssembly impelmentation leverages on AssemblyScript and brings a significant performance boost. Since some caution must be taken using this WebAssembly implementation it is not enabled by default. Check out the WebAssembly section for more details on this topic.\nMost features from Java original HdrHistogram implementations are implemented, including the following ones:\n\n- regular latency recording\n- latency recording with coordinated omissions correction\n- resizable bucket based histograms\n- memory efficient packed histograms\n- add and substract histograms\n- plain text or csv histograms outputs\n- encoding and decoding compressed histograms\n\n# Dataviz\n\nHdrHistogramJS allows to display histograms without server-side processing. Hence, within your browser, you can:\n\n- Display histograms with this slightly modified version of the [hdrhistogram plotter](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html). With this one you can use base64 v2 encoded histograms as inputs.\n- Analyze log files with this [log analyzer](https://hdrhistogram.github.io/HdrHistogramJSDemo/logparser.html), inspired from the original [java/swing based log analyzer](https://github.com/HdrHistogram/HistogramLogAnalyzer).\n\n# Getting started\n\nThis library is packaged as a UMD module, hence you can use it directly\nfrom JavaScript within a browser. To do so, you can simply include HdrHistogramJS file from github's release page:\n\n```\n<script src=\"https://github.com/HdrHistogram/HdrHistogramJS/releases/download/v2.0.0-beta4/hdrhistogram.umd.js\"></script>\n```\n\nThen you will have access to classes and functions of the APIs using \"hdr\" prefix.\n\nYou can also use HdrHistogramJS as a commonjs NodeJS module.\nUsing npm you can get HdrHIstogramJS with the following command:\n\n```\n  npm i hdr-histogram-js@2.0.0-beta4\n```\n\nOr if you like yarn better:\n\n```\n  yarn add hdr-histogram-js@2.0.0-beta4\n```\n\nNote for TypeScript developers: since HdrHistogramJS has been written in TypeScript, definition files are embedded, no additional task is needed to get them.\n\n# API\n\nThe examples below use ES6 syntax. You can check out demo sources\nfor examples on how to use HdrHistogram directly within a browser, you should\nnot have any surprise though.\n\n## Instantiate an histogram\n\nHdrHistogramJS provides several histogram implementations. The simplest way to get a new histogram instance is to use the _build()_ function. Here is how to use it:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\n```\n\nIf you need more control on the memory footprint of the instantiated histogram, you can be more specific using and optionnal build request parameter:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram\n  = hdr.build(\n    {\n      bitBucketSize: 32,                // may be 8, 16, 32, 64 or 'packed'\n      autoResize: true,                 // default value is true\n      lowestDiscernibleValue: 1,        // default value is also 1\n      highestTrackableValue: 2,         // can increase up to Number.MAX_SAFE_INTEGER\n      numberOfSignificantValueDigits: 3 // Number between 1 and 5 (inclusive)\n      useWebAssembly: false             // default value is false, see WebAssembly section for details\n    }\n  );\n\n```\n\nBitBucketSize 'packed' options is available since HdrHistogramJS v1.2 . Like the Java packed implementation, it has a very low memory footprint but it is way slower than regular bucket based implementation.\n\n## Record values and retrieve metrics\n\nOnce you have an histogram instance, in order to record a value you just need\nto call method recordValue() as below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\nconst histogram = hdr.build();\n...\nconst latency = 1234;\nhistogram.recordValue(latency);\n```\n\nThe number passed as a parameter is expected to be an integer. If it is not the case, the decimal part will be ignored.\n\nOnce you have recorded some values, you can get min, max, median values and of course percentiles values as shown below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst h = hdr.build();\nh.recordValue(123);\nh.recordValue(122);\nh.recordValue(1244);\n\nconsole.log(h.minNonZeroValue);           // 122\nconsole.log(h.maxValue);                  // 1244\nconsole.log(h.mean);                      // 486.333...\nconsole.log(h.getValueAtPercentile(90));  // 1244 as well\nconsole.log(h.summary);                   // { \"p50\": 123, ... , max: 1244, totalCount: 3 }\n```\n\nIf youn need a live example you can also take alook at this [simple ping demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/ping-demo.html) or this [HdrHistogramJS on HdrHistogramJS demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/hdr-on-hdr.html).\n\nYou can also very easily generate a textual\nrepresentation of an histogram:\n\n```\nconsole.log(`Statistics ${h}`);\n\n// output will be:\n//\n// Statistics Histogram 32b {\n//  \"p50\": 123,\n//  \"p75\": 1240,\n//  \"p90\": 1240,\n//  \"p97_5\": 1240,\n//  \"p99\": 1240,\n//  \"p99_9\": 1240,\n//  \"p99_99\": 1240,\n//  \"p99_999\": 1240,\n//  \"max\": 1244,\n//  \"totalCount\": 3\n// }\n\n```\n\nYou can also general an exhaustive textual representation similar to the one generated by the original Java HdrHistogram implementation:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordValue(25);\nhistogram.recordValue(50);\nhistogram.recordValue(75);\nconst output = histogram.outputPercentileDistribution();\n\n// output will be:\n//\n//       Value     Percentile TotalCount 1/(1-Percentile)\n//\n//      25.000 0.000000000000          1           1.00\n//  ...\n//      75.000 0.700000000000          3           3.33\n//      75.000 1.000000000000          3\n//#[Mean    =       50.000, StdDeviation   =       20.412]\n//#[Max     =       75.000, Total count    =            3]\n//#[Buckets =           43, SubBuckets     =         2048]\n\n```\n\n## Dealing with coordinated omissions\n\nIf you are recording values at a fixed rate,\nyou can correct coordinated omissions while recording values:\n\n```\nhistogram.recordValueWithExpectedInterval(1234, 100);\n```\n\nIf you prefer to apply correction afterward:\n\n```\nconst correctedHistogram\n  = histogram.copyCorrectedForCoordinatedOmission(100);\n```\n\n## Boosting performances with WebAssembly (since HdrHistogramJS v2)\n\nSince version 2, HdrHistogramJS leverages on WebAssembly to speed up computations. Depending on the use case, the performance boost can be as high as twice as fast :)  \nEverything has been done to make your life easier when using HdrHistogramJS WebAssembly impelmentation, but since the usage a little bit different WebAssembly is not enabled by default.  \nTo benefit from WebAssembly performance boost, there are three things to take care of:\n\n- Bootstrap the HdrHistogramJS WebAssembly module at application startup\n- Build a WebAssembly histogram setting the useWebAssembly flag to true\n- Explicitely ask to free up memory by calling histogram.destroy() once an histogram is not needed anymore.\n\nEven if under the cover a WebAssembly histogram is very different from a regular JS based histogram, both provide exactly the same interface.  \nThe code fragment below shows how to instantiate a resizable 32 bits WebAssembly histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\n// If you are on the browser side, you need to\n// load asynchronously HdrHistogramJS WASM module\nawait hdr.initWebAssembly();\n\n// If you are on the server side, you can\n// load synchronously HdrHistogramJS WASM module\nhdr.initWebAssemblySync();\n\nconst histogram = hdr.build({ useWebAssembly: true });\n\n// you can now use your histogram the same way you would do\n// with a regular \"JS histogram\"\nhistogram.recordValue(42);\nconsole.log(histogram.outputPercentileDistribution());\n\n// free up memory once the histogram is not needed anymore,\n// otherwise WebAssembly memory footprint will keep growing\n// each time an histogram is created\nhistogram.destroy();\n\n```\n\nNote: If you want to use this feature on the browser side, along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is mandatory to bootstrap the WASM module which is compressed to save some weight.\n\n## Encode & decode\n\nYou can encode and decode base64 compressed histograms. Hence you can decode base64 compressed histograms produced by other implementations of HdrHistogram (Java, C#, Rust, ...).  \nThe code fragment below shows how to encode an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordvalue(42);\nconst encodedString = hdr.encodeIntoBase64String(histogram);\n// gives something that looks like \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\"\n```\n\nThen to decode an histogram you can use this chunk of code:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString);\n```\n\nIn the above code fragment, 'histogram' is a regular 32b bucket histogram. Other types of histograms can be specified using additionnal parameters. Below a code fragment where a WebAssembly packed histogram is used:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString, 'packed', true);\n```\n\nIf you want to use this feature along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is used for zlib compression. Using npm you should get\nit as a transitive dependency, otherwise you need to add it in\nyour html page.\n\nYou can check out [this demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/decoding-demo.html) or this [plotter on steroid](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html) to see this feature live!  \n_Be aware that only latest V2 encoding has been implemented, please raise a github issue if you need to see other versions implemented_\n\n## Histogram logs\n\nHistogramLogWriter and HistogramLogReader classes have been migrated and the API is quite similar to the one you might have used with the Java version.\nBelow a simple usage example of the HistogramLogWriter, where the log contents are appended to a string variable:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nlet buffer: string;\nconst writer = new hdr.HistogramLogWriter(content => {\n  buffer += content;\n});\nconst histogram = hdr.build();\nhistogram.startTimeStampMsec = 1234001;\nhistogram.endTimeStampMsec   = 1235123;\n\n...\n\nhistogram.recordValue(123000);\n\nwriter.outputLogFormatVersion();\nwriter.outputLegend();\nwriter.outputIntervalHistogram(histogram);\n```\n\nAs for the reading part, if you know a little bit the Java version, the following code fragment will sound familiar:\n\n```\nconst reader = new hdr.HistogramLogReader(fileContent);\nlet histogram;\nwhile ((histogram = reader.nextIntervalHistogram()) != null) {\n  // iterate on all histogram log lines\n  ...\n\n}\n```\n\n# Performance tips\n\nHdrHistogramJS stores values in memory buckets. Memory footprint of an histogram heavily depends on 3 things:\n\n- the bucket size. A bucket can take 8, 16, 32 or 64 bits of memory. 32 bits buckets is the default.\n- the precision of the histogram (i.e. the number of significant value digits). You can have up to 5 value digits, 3 value digits should be enough for most use cases.\n- the allowed range of values. You can tunned this range with constructor/builder parameters _lowestDiscernibleValue_ and _highestTrackableValue_. If you are not sure of these values, the best option is to keep flag _autoResize_ set to true.\n\nWhile tunning memory footprint, 'estimatedFootprintInBytes' histogram property can get quite useful since it gives you a clear indicator of the memory cost:\n\n```\nconst histogram = hdr.build();\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nIf you are willing some CPU cycles in favor of memory, 'packed' bucket size is highly recommended. Available since HdrHistogramJS v1.2.0, this mode enables a very effective memory compression algorithm:\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\" });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nLast but not least, unless you are targetting very old browsers or a very old NodeJS version, you should turn on WebAssembly mode. Available since HdrHistogramJS v2.0.0, this mode is often twice as fast as regular JS mode. Also all bucket size options are available with WebAssembly, including 'packed':\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\", useWebAssembly: true });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\n# Tree Shaking\n\nThe above examples use a convenient 'barrel' index file. Using this barrel, you cannot leverage on the tree shaking features of your favorite bundler. Hence the size of your JavaScript bundle may increase significantly. If you need to optimize the size of your bundle, you can import HdrHistogram modules as shown in code fragment below:\n\n```\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n\nconst histogram = new Int32Histogram(1, 2, 3);\nhistogram.autoResize = true;\n\nhistogram.recordValue(...);\n\n```\n\n# Migrating from v1 to v2\n\nFor most users, migration from HdrHistogramJS v1 to v2 should be smooth. However since HdrHistogramJS v2 does not stick anymore with HdrHistogram Java API, you might run into some breaking changes.  \nPrior to v2, _hdr.build()_ was returning an _AbstractHistogram_ instance. _AbstractHistogram_ does not exist anymore and has been replaced by an _Histogram_ interface. Most methods from _AbstractHistogram_ still exist in new _Histogram_, however getter methods such as _getMean()_ or _getTotalCount()_ have been replaced by JS properties:\n\n```\n// HdrHistogramJS v1\nconst histogram: AbstractHistogram = hdr.build();\nconst statistics = {\n  count: histogram.getTotalCount(),\n  mean: histogram.getMean(),\n  p99: histogram.getValueAtPercentile(99),\n}\n\n// becomes with HdrHistogramJS v2\nconst histogram: Histogram = hdr.build();\nconst statistics = {\n  count: histogram.totalCount,\n  mean: histogram.mean,\n  p99: histogram.getValueAtPercentile(99),\n}\n```\n\nModule paths also change a little bit with v2. Hence if you were importing specific modules as described in the tree shaking section, you need to change a little bit your code as below:\n\n```\n// HdrHistogramJS v1\nimport AbstractHistogram from \"hdr-histogram-js/AbstractHistogram\"\nimport Int32Histogram from \"hdr-histogram-js/Int32Histogram\"\n\n// becomes with HdrHistogramJS v2\nimport Histogram from \"hdr-histogram-js/dist/Histogram\"\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n```\n\n# Design & Limitations\n\nThe code is almost a direct port of the Java version.\nOptimisation based on inheritance to avoid false sharing\nmight not be relevant in JS, but I believe that keeping\nthe same code structure might be handy to keep the code up to date\nwith the Java version in the future.\n\nMain limitations comes from number support in JavaScript.\nThere is no such thing as 64b integers in JavaScript. Everything is \"number\",\nand a number is safe as an integer up to 2^53.  \nThe most annoying issue encountered during the code migration,\nis that bit operations, heavily used within original HdrHistogram,\nonly work on the first 32 bits. That means that the following JavaScript expression is evaluated as true:\n\n```\nMath.pow(2, 31) << 1 === 0   // sad but true\n```\n\nAnyway bit shift operations are not really optimized\nin most browser, so... everything related to bits have been\nconverted to good old arithmetic expressions in the process\nof converting the Java code to TypeScript.  \nWith WebAssembly and AssemblyScript things are different. HdrHistogramsJS AssemblyScript source code is closer to the original Java code since all the limitations mentioned above does not apply to WebAssembly :)\n","licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@2.0.0-beta5","dist":{"shasum":"9482770fb68cf0ab1d40750b1c9de0ae86336d9f","integrity":"sha512-HT9nhuWCuT+8USWqHMIKouvNASVcFasUXQFTTVBTIkSw1KZm5/a+akyy6jbSU+28+LBTSAHmTJmELnAiZVbPnw==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.0-beta5.tgz","fileCount":302,"unpackedSize":5207478,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfF0mqCRA9TVsSAnZWagAA+z8P/1/KqxC7AZeZcDkKIvLb\n193m0NqMJjjjzpDEflcqJTZ5wAN0q8vbvVXI7BRX1LoGx8juz3syZodinvmj\nQWuzteknrdi0AjzejFL5VvayRPVzg6NUk4yOga/rv5xX2pP5OmSs6Xl7cKw6\nq9DQdXatJ67i9hVedw3hKTh6kd50LP8dNUNr6qBYSYu0LymwA5/y932CtZSd\n7arcixGwJVnVj5Lpv35EyB17Ua459UqKM4N+Z6zlVa4v0GZXGC/S6EP0H0TW\nqxuRhwPsM4/DjXyuZZ23+mun8NOBjcWlEBNhLZhsvHCUEwznUJj7Pw3J+tuH\nrkLDv7yW1a1oTf+GwZUofTRnPKDvbsEhBmX1yxurp7mqP1rcQuvgbLf6bZwe\nDau9IUatOVo4glO/9rE63/dd6UeBa93SYznu/me+w2ETkPgvXp8eMovJJfTz\ntMosN3fdUFo89M3R6cpLvV5C512xuMkS7CGNFbpfBpRo3+jUWbyW78PwAOPO\nyVFnuo1b/2c/ng9j/z6lG2JDN+kXnZ2jKpErHWaZzs8yWSi5Mhy7OyNrL47x\nOhAmrwOIh9LrXYV+G/E5NFg7zURy3JoK+FGJR0eNgf616CgLlxffQTy/9i6w\nHdnoZxKG7tnCE/I6+DPLzC4ViP5lA+QE8OVir2+v/quOaHLyoROM0ueJ5VBK\nLy6i\r\n=G9Jb\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.0-beta5_1595361706325_0.953269091739376"},"_hasShrinkwrap":false},"2.0.0-beta6":{"name":"hdr-histogram-js","version":"2.0.0-beta6","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"readmeFilename":"README.md","readme":"[![Build Status](https://travis-ci.org/HdrHistogram/HdrHistogramJS.svg?branch=master)](https://travis-ci.org/HdrHistogram/HdrHistogramJS)\n\n# HdrHistogramJS\n\nTypeScript port of HdrHistogram for NodeJS and web browsers.  \nSince version 2, HdrHistogramJS comes in 2 flavors: the good old TypeScript implementation and a new WebAssembly implementation. This new WebAssembly impelmentation leverages on AssemblyScript and brings a significant performance boost. Since some caution must be taken using this WebAssembly implementation it is not enabled by default. Check out the WebAssembly section for more details on this topic.\nMost features from Java original HdrHistogram implementations are implemented, including the following ones:\n\n- regular latency recording\n- latency recording with coordinated omissions correction\n- resizable bucket based histograms\n- memory efficient packed histograms\n- add and substract histograms\n- plain text or csv histograms outputs\n- encoding and decoding compressed histograms\n\n# Dataviz\n\nHdrHistogramJS allows to display histograms without server-side processing. Hence, within your browser, you can:\n\n- Display histograms with this slightly modified version of the [hdrhistogram plotter](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html). With this one you can use base64 v2 encoded histograms as inputs.\n- Analyze log files with this [log analyzer](https://hdrhistogram.github.io/HdrHistogramJSDemo/logparser.html), inspired from the original [java/swing based log analyzer](https://github.com/HdrHistogram/HistogramLogAnalyzer).\n\n# Getting started\n\nThis library is packaged as a UMD module, hence you can use it directly\nfrom JavaScript within a browser. To do so, you can simply include HdrHistogramJS file from github's release page:\n\n```\n<script src=\"https://github.com/HdrHistogram/HdrHistogramJS/releases/download/v2.0.0-beta4/hdrhistogram.umd.js\"></script>\n```\n\nThen you will have access to classes and functions of the APIs using \"hdr\" prefix.\n\nYou can also use HdrHistogramJS as a commonjs NodeJS module.\nUsing npm you can get HdrHIstogramJS with the following command:\n\n```\n  npm i hdr-histogram-js@2.0.0-beta4\n```\n\nOr if you like yarn better:\n\n```\n  yarn add hdr-histogram-js@2.0.0-beta4\n```\n\nNote for TypeScript developers: since HdrHistogramJS has been written in TypeScript, definition files are embedded, no additional task is needed to get them.\n\n# API\n\nThe examples below use ES6 syntax. You can check out demo sources\nfor examples on how to use HdrHistogram directly within a browser, you should\nnot have any surprise though.\n\n## Instantiate an histogram\n\nHdrHistogramJS provides several histogram implementations. The simplest way to get a new histogram instance is to use the _build()_ function. Here is how to use it:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\n```\n\nIf you need more control on the memory footprint of the instantiated histogram, you can be more specific using and optionnal build request parameter:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram\n  = hdr.build(\n    {\n      bitBucketSize: 32,                // may be 8, 16, 32, 64 or 'packed'\n      autoResize: true,                 // default value is true\n      lowestDiscernibleValue: 1,        // default value is also 1\n      highestTrackableValue: 2,         // can increase up to Number.MAX_SAFE_INTEGER\n      numberOfSignificantValueDigits: 3 // Number between 1 and 5 (inclusive)\n      useWebAssembly: false             // default value is false, see WebAssembly section for details\n    }\n  );\n\n```\n\nBitBucketSize 'packed' options is available since HdrHistogramJS v1.2 . Like the Java packed implementation, it has a very low memory footprint but it is way slower than regular bucket based implementation.\n\n## Record values and retrieve metrics\n\nOnce you have an histogram instance, in order to record a value you just need\nto call method recordValue() as below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\nconst histogram = hdr.build();\n...\nconst latency = 1234;\nhistogram.recordValue(latency);\n```\n\nThe number passed as a parameter is expected to be an integer. If it is not the case, the decimal part will be ignored.\n\nOnce you have recorded some values, you can get min, max, median values and of course percentiles values as shown below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst h = hdr.build();\nh.recordValue(123);\nh.recordValue(122);\nh.recordValue(1244);\n\nconsole.log(h.minNonZeroValue);           // 122\nconsole.log(h.maxValue);                  // 1244\nconsole.log(h.mean);                      // 486.333...\nconsole.log(h.getValueAtPercentile(90));  // 1244 as well\nconsole.log(h.summary);                   // { \"p50\": 123, ... , max: 1244, totalCount: 3 }\n```\n\nIf youn need a live example you can also take alook at this [simple ping demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/ping-demo.html) or this [HdrHistogramJS on HdrHistogramJS demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/hdr-on-hdr.html).\n\nYou can also very easily generate a textual\nrepresentation of an histogram:\n\n```\nconsole.log(`Statistics ${h}`);\n\n// output will be:\n//\n// Statistics Histogram 32b {\n//  \"p50\": 123,\n//  \"p75\": 1240,\n//  \"p90\": 1240,\n//  \"p97_5\": 1240,\n//  \"p99\": 1240,\n//  \"p99_9\": 1240,\n//  \"p99_99\": 1240,\n//  \"p99_999\": 1240,\n//  \"max\": 1244,\n//  \"totalCount\": 3\n// }\n\n```\n\nYou can also general an exhaustive textual representation similar to the one generated by the original Java HdrHistogram implementation:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordValue(25);\nhistogram.recordValue(50);\nhistogram.recordValue(75);\nconst output = histogram.outputPercentileDistribution();\n\n// output will be:\n//\n//       Value     Percentile TotalCount 1/(1-Percentile)\n//\n//      25.000 0.000000000000          1           1.00\n//  ...\n//      75.000 0.700000000000          3           3.33\n//      75.000 1.000000000000          3\n//#[Mean    =       50.000, StdDeviation   =       20.412]\n//#[Max     =       75.000, Total count    =            3]\n//#[Buckets =           43, SubBuckets     =         2048]\n\n```\n\n## Dealing with coordinated omissions\n\nIf you are recording values at a fixed rate,\nyou can correct coordinated omissions while recording values:\n\n```\nhistogram.recordValueWithExpectedInterval(1234, 100);\n```\n\nIf you prefer to apply correction afterward:\n\n```\nconst correctedHistogram\n  = histogram.copyCorrectedForCoordinatedOmission(100);\n```\n\n## Boosting performances with WebAssembly (since HdrHistogramJS v2)\n\nSince version 2, HdrHistogramJS leverages on WebAssembly to speed up computations. Depending on the use case, the performance boost can be as high as twice as fast :)  \nEverything has been done to make your life easier when using HdrHistogramJS WebAssembly impelmentation, but since the usage a little bit different WebAssembly is not enabled by default.  \nTo benefit from WebAssembly performance boost, there are three things to take care of:\n\n- Bootstrap the HdrHistogramJS WebAssembly module at application startup\n- Build a WebAssembly histogram setting the useWebAssembly flag to true\n- Explicitely ask to free up memory by calling histogram.destroy() once an histogram is not needed anymore.\n\nEven if under the cover a WebAssembly histogram is very different from a regular JS based histogram, both provide exactly the same interface.  \nThe code fragment below shows how to instantiate a resizable 32 bits WebAssembly histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\n// If you are on the browser side, you need to\n// load asynchronously HdrHistogramJS WASM module\nawait hdr.initWebAssembly();\n\n// If you are on the server side, you can\n// load synchronously HdrHistogramJS WASM module\nhdr.initWebAssemblySync();\n\nconst histogram = hdr.build({ useWebAssembly: true });\n\n// you can now use your histogram the same way you would do\n// with a regular \"JS histogram\"\nhistogram.recordValue(42);\nconsole.log(histogram.outputPercentileDistribution());\n\n// free up memory once the histogram is not needed anymore,\n// otherwise WebAssembly memory footprint will keep growing\n// each time an histogram is created\nhistogram.destroy();\n\n```\n\nNote: If you want to use this feature on the browser side, along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is mandatory to bootstrap the WASM module which is compressed to save some weight.\n\n## Encode & decode\n\nYou can encode and decode base64 compressed histograms. Hence you can decode base64 compressed histograms produced by other implementations of HdrHistogram (Java, C#, Rust, ...).  \nThe code fragment below shows how to encode an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordvalue(42);\nconst encodedString = hdr.encodeIntoBase64String(histogram);\n// gives something that looks like \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\"\n```\n\nThen to decode an histogram you can use this chunk of code:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString);\n```\n\nIn the above code fragment, 'histogram' is a regular 32b bucket histogram. Other types of histograms can be specified using additionnal parameters. Below a code fragment where a WebAssembly packed histogram is used:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString, 'packed', true);\n```\n\nIf you want to use this feature along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is used for zlib compression. Using npm you should get\nit as a transitive dependency, otherwise you need to add it in\nyour html page.\n\nYou can check out [this demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/decoding-demo.html) or this [plotter on steroid](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html) to see this feature live!  \n_Be aware that only latest V2 encoding has been implemented, please raise a github issue if you need to see other versions implemented_\n\n## Histogram logs\n\nHistogramLogWriter and HistogramLogReader classes have been migrated and the API is quite similar to the one you might have used with the Java version.\nBelow a simple usage example of the HistogramLogWriter, where the log contents are appended to a string variable:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nlet buffer: string;\nconst writer = new hdr.HistogramLogWriter(content => {\n  buffer += content;\n});\nconst histogram = hdr.build();\nhistogram.startTimeStampMsec = 1234001;\nhistogram.endTimeStampMsec   = 1235123;\n\n...\n\nhistogram.recordValue(123000);\n\nwriter.outputLogFormatVersion();\nwriter.outputLegend();\nwriter.outputIntervalHistogram(histogram);\n```\n\nAs for the reading part, if you know a little bit the Java version, the following code fragment will sound familiar:\n\n```\nconst reader = new hdr.HistogramLogReader(fileContent);\nlet histogram;\nwhile ((histogram = reader.nextIntervalHistogram()) != null) {\n  // iterate on all histogram log lines\n  ...\n\n}\n```\n\n# Performance tips\n\nHdrHistogramJS stores values in memory buckets. Memory footprint of an histogram heavily depends on 3 things:\n\n- the bucket size. A bucket can take 8, 16, 32 or 64 bits of memory. 32 bits buckets is the default.\n- the precision of the histogram (i.e. the number of significant value digits). You can have up to 5 value digits, 3 value digits should be enough for most use cases.\n- the allowed range of values. You can tunned this range with constructor/builder parameters _lowestDiscernibleValue_ and _highestTrackableValue_. If you are not sure of these values, the best option is to keep flag _autoResize_ set to true.\n\nWhile tunning memory footprint, 'estimatedFootprintInBytes' histogram property can get quite useful since it gives you a clear indicator of the memory cost:\n\n```\nconst histogram = hdr.build();\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nIf you are willing some CPU cycles in favor of memory, 'packed' bucket size is highly recommended. Available since HdrHistogramJS v1.2.0, this mode enables a very effective memory compression algorithm:\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\" });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nLast but not least, unless you are targetting very old browsers or a very old NodeJS version, you should turn on WebAssembly mode. Available since HdrHistogramJS v2.0.0, this mode is often twice as fast as regular JS mode. Also all bucket size options are available with WebAssembly, including 'packed':\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\", useWebAssembly: true });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\n# Tree Shaking\n\nThe above examples use a convenient 'barrel' index file. Using this barrel, you cannot leverage on the tree shaking features of your favorite bundler. Hence the size of your JavaScript bundle may increase significantly. If you need to optimize the size of your bundle, you can import HdrHistogram modules as shown in code fragment below:\n\n```\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n\nconst histogram = new Int32Histogram(1, 2, 3);\nhistogram.autoResize = true;\n\nhistogram.recordValue(...);\n\n```\n\n# Migrating from v1 to v2\n\nFor most users, migration from HdrHistogramJS v1 to v2 should be smooth. However since HdrHistogramJS v2 does not stick anymore with HdrHistogram Java API, you might run into some breaking changes.  \nPrior to v2, _hdr.build()_ was returning an _AbstractHistogram_ instance. _AbstractHistogram_ does not exist anymore and has been replaced by an _Histogram_ interface. Most methods from _AbstractHistogram_ still exist in new _Histogram_, however getter methods such as _getMean()_ or _getTotalCount()_ have been replaced by JS properties:\n\n```\n// HdrHistogramJS v1\nconst histogram: AbstractHistogram = hdr.build();\nconst statistics = {\n  count: histogram.getTotalCount(),\n  mean: histogram.getMean(),\n  p99: histogram.getValueAtPercentile(99),\n}\n\n// becomes with HdrHistogramJS v2\nconst histogram: Histogram = hdr.build();\nconst statistics = {\n  count: histogram.totalCount,\n  mean: histogram.mean,\n  p99: histogram.getValueAtPercentile(99),\n}\n```\n\nModule paths also change a little bit with v2. Hence if you were importing specific modules as described in the tree shaking section, you need to change a little bit your code as below:\n\n```\n// HdrHistogramJS v1\nimport AbstractHistogram from \"hdr-histogram-js/AbstractHistogram\"\nimport Int32Histogram from \"hdr-histogram-js/Int32Histogram\"\n\n// becomes with HdrHistogramJS v2\nimport Histogram from \"hdr-histogram-js/dist/Histogram\"\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n```\n\n# Design & Limitations\n\nThe code is almost a direct port of the Java version.\nOptimisation based on inheritance to avoid false sharing\nmight not be relevant in JS, but I believe that keeping\nthe same code structure might be handy to keep the code up to date\nwith the Java version in the future.\n\nMain limitations comes from number support in JavaScript.\nThere is no such thing as 64b integers in JavaScript. Everything is \"number\",\nand a number is safe as an integer up to 2^53.  \nThe most annoying issue encountered during the code migration,\nis that bit operations, heavily used within original HdrHistogram,\nonly work on the first 32 bits. That means that the following JavaScript expression is evaluated as true:\n\n```\nMath.pow(2, 31) << 1 === 0   // sad but true\n```\n\nAnyway bit shift operations are not really optimized\nin most browser, so... everything related to bits have been\nconverted to good old arithmetic expressions in the process\nof converting the Java code to TypeScript.  \nWith WebAssembly and AssemblyScript things are different. HdrHistogramsJS AssemblyScript source code is closer to the original Java code since all the limitations mentioned above does not apply to WebAssembly :)\n","licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@2.0.0-beta6","dist":{"shasum":"6915d7f797c4447f7c00bd61b9beebe66d084b20","integrity":"sha512-H7bDVmYS4UUHQnl2DtszsQINLH5s4ExLxrghZ67rWeM3pfLeZE54NZV0G4WNV/qrJkUP4LrnMAeTlEOuwvTHWQ==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.0-beta6.tgz","fileCount":302,"unpackedSize":5209432,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfF0o+CRA9TVsSAnZWagAAkioQAINtLGtfR7NvwZrOVD14\neQID9nPmrJWcsGanM3NZjsVYpuOgDReS/GSC/qHqIWPIEkn1igNjOeCUNtf1\nYMn+CQYpiyhLFfihrseBKDvJSegJ74vc+uJZVVsDocsuj99Alu3RFqdpYTJv\nirs/nnqqV/M5gHNcPxcvgXR8nmbSbsg47rIHF0r9kSra2dxr/EDzULiuhSQx\nAas22j9584k9593ZFFbT0EmCdp2vflnHG9mf61ew8UZ7EtbJm9DkBarnN9Gb\noJUAIlacrUuu3n2dFiUm5Nlsz5BjQs9MEexCAQ//nWDLhIb06RFpy7liLpcY\nZl44AcAWBgBue7R5S24uHLcjoCi3YK9BXh86MGhtlqsm2BOm9YagebXZmHqa\nKS2mbBrVgtzoC+rciJXUWwqQ0Hi3lhyJlSZHpPcKckgmYghaX4ArMf11sG0j\nGrvgGFr1XT1a25X2c8krVvA8xbHcGM3KyjQJwEXSzk8iNvtNH1+x4vZcUrHv\n024A1VzAKY7f3vTQdGJkQfoG7uC+SzQIcGREcsR/pPKF8Jz99FsSlte2gUg9\nPSk3xGOu3lqLV0ubsTkQWxf7FzVkIZy9IefnBNPKBZmhhSLWUa1d+I+PAwBD\nPUqIRIyo6XtR8q2eBEKo5HF3sZ4xqNsqJJzYqHNzTUtr5VuTWA3xgirGMXZ7\nS5wP\r\n=Czdv\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.0-beta6_1595361854410_0.5011473245835862"},"_hasShrinkwrap":false},"2.0.0-beta7":{"name":"hdr-histogram-js","version":"2.0.0-beta7","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"readmeFilename":"README.md","readme":"[![Build Status](https://travis-ci.org/HdrHistogram/HdrHistogramJS.svg?branch=master)](https://travis-ci.org/HdrHistogram/HdrHistogramJS)\n\n# HdrHistogramJS\n\nTypeScript port of HdrHistogram for NodeJS and web browsers.  \nSince version 2, HdrHistogramJS comes in 2 flavors: the good old TypeScript implementation and a brand new WebAssembly implementation. This new WebAssembly implementation leverages on AssemblyScript to bring a significant performance boost. Since some caution must be taken using this WebAssembly implementation it is not enabled by default. Check out the [WebAssembly section](#boosting-performances-with-webassembly-since-hdrhistogramjs-v2) for more details on this topic.\nMost features from Java original HdrHistogram implementations are implemented, including the following ones:\n\n- regular latency recording\n- latency recording with coordinated omissions correction\n- resizable bucket based histograms\n- memory efficient packed histograms\n- add and substract histograms\n- plain text or csv histograms outputs\n- encoding and decoding compressed histograms\n\n# Dataviz\n\nHdrHistogramJS allows to display histograms without server-side processing. Hence, within your browser, you can:\n\n- Display histograms with this slightly modified version of the [hdrhistogram plotter](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html). With this one you can use base64 v2 encoded histograms as inputs.\n- Analyze log files with this [log analyzer](https://hdrhistogram.github.io/HdrHistogramJSDemo/logparser.html), inspired from the original [java/swing based log analyzer](https://github.com/HdrHistogram/HistogramLogAnalyzer).\n\n# Getting started\n\nThis library is packaged as a UMD module, hence you can use it directly\nfrom JavaScript within a browser. To do so, you can simply include HdrHistogramJS file from github's release page:\n\n```\n<script src=\"https://github.com/HdrHistogram/HdrHistogramJS/releases/download/v2.0.0-beta6/hdrhistogram.umd.js\"></script>\n```\n\nThen you will have access to classes and functions of the APIs using \"hdr\" prefix.\n\nYou can also use HdrHistogramJS as a commonjs NodeJS module.\nUsing npm you can get HdrHIstogramJS with the following command:\n\n```\n  npm i hdr-histogram-js@2.0.0-beta6\n```\n\nOr if you like yarn better:\n\n```\n  yarn add hdr-histogram-js@2.0.0-beta6\n```\n\nNote for TypeScript developers: since HdrHistogramJS has been written in TypeScript, definition files are embedded, no additional task is needed to get them.\n\n# API\n\nThe examples below use ES6 syntax. You can check out demo sources\nfor examples on how to use HdrHistogram directly within a browser, you should\nnot have any surprise though.\n\n## Instantiate an histogram\n\nHdrHistogramJS provides several histogram implementations. The simplest way to get a new histogram instance is to use the _build()_ function. Here is how to use it:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\n```\n\nIf you need more control on the memory footprint of the instantiated histogram, you can be more specific using and optionnal build request parameter:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram\n  = hdr.build(\n    {\n      bitBucketSize: 32,                // may be 8, 16, 32, 64 or 'packed'\n      autoResize: true,                 // default value is true\n      lowestDiscernibleValue: 1,        // default value is also 1\n      highestTrackableValue: 2,         // can increase up to Number.MAX_SAFE_INTEGER\n      numberOfSignificantValueDigits: 3 // Number between 1 and 5 (inclusive)\n      useWebAssembly: false             // default value is false, see WebAssembly section for details\n    }\n  );\n\n```\n\nBitBucketSize 'packed' options is available since HdrHistogramJS v1.2 . Like the Java packed implementation, it has a very low memory footprint but it is way slower than regular bucket based implementation.\n\n## Record values and retrieve metrics\n\nOnce you have an histogram instance, in order to record a value you just need\nto call method recordValue() as below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\nconst histogram = hdr.build();\n...\nconst latency = 1234;\nhistogram.recordValue(latency);\n```\n\nThe number passed as a parameter is expected to be an integer. If it is not the case, the decimal part will be ignored.\n\nOnce you have recorded some values, you can get min, max, median values and of course percentiles values as shown below:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst h = hdr.build();\nh.recordValue(123);\nh.recordValue(122);\nh.recordValue(1244);\n\nconsole.log(h.minNonZeroValue);           // 122\nconsole.log(h.maxValue);                  // 1244\nconsole.log(h.mean);                      // 486.333...\nconsole.log(h.getValueAtPercentile(90));  // 1244 as well\nconsole.log(h.summary);                   // { \"p50\": 123, ... , max: 1244, totalCount: 3 }\n```\n\nIf youn need a live example you can also take alook at this [simple ping demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/ping-demo.html) or this [HdrHistogramJS on HdrHistogramJS demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/hdr-on-hdr.html).\n\nYou can also very easily generate a textual\nrepresentation of an histogram:\n\n```\nconsole.log(`Statistics ${h}`);\n\n// output will be:\n//\n// Statistics Histogram 32b {\n//  \"p50\": 123,\n//  \"p75\": 1240,\n//  \"p90\": 1240,\n//  \"p97_5\": 1240,\n//  \"p99\": 1240,\n//  \"p99_9\": 1240,\n//  \"p99_99\": 1240,\n//  \"p99_999\": 1240,\n//  \"max\": 1244,\n//  \"totalCount\": 3\n// }\n\n```\n\nYou can also general an exhaustive textual representation similar to the one generated by the original Java HdrHistogram implementation:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordValue(25);\nhistogram.recordValue(50);\nhistogram.recordValue(75);\nconst output = histogram.outputPercentileDistribution();\n\n// output will be:\n//\n//       Value     Percentile TotalCount 1/(1-Percentile)\n//\n//      25.000 0.000000000000          1           1.00\n//  ...\n//      75.000 0.700000000000          3           3.33\n//      75.000 1.000000000000          3\n//#[Mean    =       50.000, StdDeviation   =       20.412]\n//#[Max     =       75.000, Total count    =            3]\n//#[Buckets =           43, SubBuckets     =         2048]\n\n```\n\n## Dealing with coordinated omissions\n\nIf you are recording values at a fixed rate,\nyou can correct coordinated omissions while recording values:\n\n```\nhistogram.recordValueWithExpectedInterval(1234, 100);\n```\n\nIf you prefer to apply correction afterward:\n\n```\nconst correctedHistogram\n  = histogram.copyCorrectedForCoordinatedOmission(100);\n```\n\n## Boosting performances with WebAssembly (since HdrHistogramJS v2)\n\nSince version 2, HdrHistogramJS leverages on WebAssembly to speed up computations. Depending on the use case, the performance boost can be as high as twice as fast :)  \nEverything has been done to make your life easier when using HdrHistogramJS WebAssembly impelmentation, but since the usage a little bit different WebAssembly is not enabled by default.  \nTo benefit from WebAssembly performance boost, there are three things to take care of:\n\n- Bootstrap the HdrHistogramJS WebAssembly module at application startup\n- Build a WebAssembly histogram setting the useWebAssembly flag to true\n- Explicitely ask to free up memory by calling _histogram.destroy()_ once an histogram is not needed anymore.\n\nEven if under the cover a WebAssembly histogram is very different from a regular JS based histogram, both provide exactly the same interface.  \nThe code fragment below shows how to instantiate a resizable 32 bits WebAssembly histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\n// If you are on the browser side, you need to\n// load asynchronously HdrHistogramJS WASM module\nawait hdr.initWebAssembly();\n\n// If you are on the server side, you can\n// load synchronously HdrHistogramJS WASM module\nhdr.initWebAssemblySync();\n\nconst histogram = hdr.build({ useWebAssembly: true });\n\n// you can now use your histogram the same way you would do\n// with a regular \"JS histogram\"\nhistogram.recordValue(42);\nconsole.log(histogram.outputPercentileDistribution());\n\n// free up memory once the histogram is not needed anymore,\n// otherwise WebAssembly memory footprint will keep growing\n// each time an histogram is created\nhistogram.destroy();\n\n```\n\nNote: If you want to use this feature on the browser side, along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is mandatory to bootstrap the WASM module which is compressed to save some weight.\n\n## Encode & decode\n\nYou can encode and decode base64 compressed histograms. Hence you can decode base64 compressed histograms produced by other implementations of HdrHistogram (Java, C#, Rust, ...).  \nThe code fragment below shows how to encode an histogram:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst histogram = hdr.build();\nhistogram.recordvalue(42);\nconst encodedString = hdr.encodeIntoBase64String(histogram);\n// gives something that looks like \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\"\n```\n\nThen to decode an histogram you can use this chunk of code:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString);\n```\n\nIn the above code fragment, 'histogram' is a regular 32b bucket histogram. Other types of histograms can be specified using additionnal parameters. Below a code fragment where a WebAssembly packed histogram is used:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nconst encodedString = \"HISTFAAAAB542pNpmSzMwMDAxAABzFCaEUoz2X+AMIKZAEARAtM=\";\nconst histogram = hdr.decodeFromCompressedBase64(encodedString, 'packed', true);\n```\n\nIf you want to use this feature along with the UMD package, you need to add external dependency\n\"pako\". \"pako\" is used for zlib compression. Using npm you should get\nit as a transitive dependency, otherwise you need to add it in\nyour html page.\n\nYou can check out [this demo](https://hdrhistogram.github.io/HdrHistogramJSDemo/decoding-demo.html) or this [plotter on steroid](https://hdrhistogram.github.io/HdrHistogramJSDemo/plotFiles.html) to see this feature live!  \n_Be aware that only latest V2 encoding has been implemented, please raise a github issue if you need to see other versions implemented_\n\n## Histogram logs\n\nHistogramLogWriter and HistogramLogReader classes have been migrated and the API is quite similar to the one you might have used with the Java version.\nBelow a simple usage example of the HistogramLogWriter, where the log contents are appended to a string variable:\n\n```\nimport * as hdr from \"hdr-histogram-js\"\n\nlet buffer: string;\nconst writer = new hdr.HistogramLogWriter(content => {\n  buffer += content;\n});\nconst histogram = hdr.build();\nhistogram.startTimeStampMsec = 1234001;\nhistogram.endTimeStampMsec   = 1235123;\n\n...\n\nhistogram.recordValue(123000);\n\nwriter.outputLogFormatVersion();\nwriter.outputLegend();\nwriter.outputIntervalHistogram(histogram);\n```\n\nAs for the reading part, if you know a little bit the Java version, the following code fragment will sound familiar:\n\n```\nconst reader = new hdr.HistogramLogReader(fileContent);\nlet histogram;\nwhile ((histogram = reader.nextIntervalHistogram()) != null) {\n  // iterate on all histogram log lines\n  ...\n\n}\n```\n\n# Performance tips\n\nHdrHistogramJS stores values in memory buckets. Memory footprint of an histogram heavily depends on 3 things:\n\n- the bucket size. A bucket can take 8, 16, 32 or 64 bits of memory. 32 bits buckets is the default.\n- the precision of the histogram (i.e. the number of significant value digits). You can have up to 5 value digits, 3 value digits should be enough for most use cases.\n- the allowed range of values. You can tunned this range with constructor/builder parameters _lowestDiscernibleValue_ and _highestTrackableValue_. If you are not sure of these values, the best option is to keep flag _autoResize_ set to true.\n\nWhile tunning memory footprint, 'estimatedFootprintInBytes' histogram property can get quite useful since it gives you a clear indicator of the memory cost:\n\n```\nconst histogram = hdr.build();\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nIf you are willing some CPU cycles in favor of memory, 'packed' bucket size is highly recommended. Available since HdrHistogramJS v1.2.0, this mode enables a very effective memory compression algorithm:\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\" });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\nLast but not least, unless you are targetting very old browsers or a very old NodeJS version, you should turn on WebAssembly mode. Available since HdrHistogramJS v2.0.0, this mode is often twice as fast as regular JS mode. Also all bucket size options are available with WebAssembly, including 'packed':\n\n```\nconst histogram = hdr.build({ bitBucketSize: \"packed\", useWebAssembly: true });\nconsole.log(histogram.estimatedFootprintInBytes);\n```\n\n# Tree Shaking\n\nThe above examples use a convenient 'barrel' index file. Using this barrel, you cannot leverage on the tree shaking features of your favorite bundler. Hence the size of your JavaScript bundle may increase significantly. If you need to optimize the size of your bundle, you can import HdrHistogram modules as shown in code fragment below:\n\n```\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n\nconst histogram = new Int32Histogram(1, 2, 3);\nhistogram.autoResize = true;\n\nhistogram.recordValue(...);\n\n```\n\n# Migrating from v1 to v2\n\nFor most users, migration from HdrHistogramJS v1 to v2 should be smooth. However since HdrHistogramJS v2 does not stick anymore with HdrHistogram Java API, you might run into some breaking changes.  \nPrior to v2, _hdr.build()_ was returning an _AbstractHistogram_ instance. _AbstractHistogram_ does not exist anymore and has been replaced by the _Histogram_ interface. Most methods from _AbstractHistogram_ still exist in new interface _Histogram_, however in order to have a more JS idiomatic API, getter methods such as _getMean()_ or _getTotalCount()_ have been replaced by JS properties:\n\n```\n// HdrHistogramJS v1\nconst histogram: AbstractHistogram = hdr.build();\nconst statistics = {\n  count: histogram.getTotalCount(),\n  mean: histogram.getMean(),\n  p99: histogram.getValueAtPercentile(99),\n}\n\n// becomes with HdrHistogramJS v2\nconst histogram: Histogram = hdr.build();\nconst statistics = {\n  count: histogram.totalCount,\n  mean: histogram.mean,\n  p99: histogram.getValueAtPercentile(99),\n}\n```\n\nModule paths also change a little bit with v2. Hence if you were importing specific modules as described in the tree shaking section, you need to change a little bit your code as below:\n\n```\n// HdrHistogramJS v1\nimport AbstractHistogram from \"hdr-histogram-js/AbstractHistogram\"\nimport Int32Histogram from \"hdr-histogram-js/Int32Histogram\"\n\n// becomes with HdrHistogramJS v2\nimport Histogram from \"hdr-histogram-js/dist/Histogram\"\nimport Int32Histogram from \"hdr-histogram-js/dist/Int32Histogram\"\n```\n\n# Design & Limitations\n\nThe code is almost a direct port of the Java version.\nOptimisation based on inheritance to avoid false sharing\nmight not be relevant in JS, but I believe that keeping\nthe same code structure might be handy to keep the code up to date\nwith the Java version in the future.\n\nMain limitations comes from number support in JavaScript.\nThere is no such thing as 64b integers in JavaScript. Everything is \"number\",\nand a number is safe as an integer up to 2^53.  \nThe most annoying issue encountered during the code migration,\nis that bit operations, heavily used within original HdrHistogram,\nonly work on the first 32 bits. That means that the following JavaScript expression is evaluated as true:\n\n```\nMath.pow(2, 31) << 1 === 0   // sad but true\n```\n\nAnyway bit shift operations are not really optimized\nin most browser, so... everything related to bits have been\nconverted to good old arithmetic expressions in the process\nof converting the Java code to TypeScript.  \nWith WebAssembly and AssemblyScript things are different. HdrHistogramsJS AssemblyScript source code is closer to the original Java code since all the limitations mentioned above does not apply to WebAssembly :)\n","licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@2.0.0-beta7","dist":{"shasum":"c7e8a32fa650fd8c606767ca44fb094c3d3f9bca","integrity":"sha512-JLN+PVgRTAIb90MIMUvjhVtf5Zm/Swyk4LzrhqllAGVjufGKYkdpD7ZfxAOTKB6CLGfHte2nwM4u/CVZMnKKlg==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.0-beta7.tgz","fileCount":302,"unpackedSize":5210025,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfHD4NCRA9TVsSAnZWagAAIsUP/RfoNlCalf9n9Nkeg+WS\nAJ/7lJmApfQ7jVUh6dbwuLvBwlDQjWk9JvZcrwkDDmAdwwsFcIvUvm7mn7XN\nTHZGbiyOdZOrj1RVQOTUuKBAZrzOgX5LppK6pQ2g0tzHBXaXdUv+BbTGGyxA\n63YE/puhUMtdg1hZTi4ndcKZwZCutKIm0WO0T58eJyB33ozD7ZdOEHHxGo1Q\np2uEpJMWw/7uinq/G6W2x+WI1V36PKPjyjk44k33C71CSeOIUYb979PHxR5k\n6d6wlvEirpxdi8xghMmaOL7w2ntlgWNXzjKaean61KETzYnptiZ6CtElrYTO\nIrlGKq0vFn8tZtHRneb7L7VsJ4KNeNelAkKXcS0xDmWQ7gkleoIS8XORx/PB\njNq/cjaAoswG/lZFkLRAYvIFrCwtQUFg1F1LGWtYmy35krKMcgMOPcyALxFe\nfCGfNXSeDkpw9IkNsXqCKDaZenAbr0qXpT41oZMyaKpDASFkAwoHMvvg0smz\ncWQ53hUvxWqpgrVtACKBznjP4cPNAvoTyf6xlRZBz2ZBE4xG6UfEYNzoqBvz\nE+PfmHps5bH5qVm9+nZxwjUwqzRZ4iDfxX6yciqIqtEUcsv/J6+eh6pFynJD\npnEMIZlQCSIxpqptfeELFtPJuUpG/0bUeMLzlZ2yZrIq1p142BJ3v5Tw4D+o\nUXlT\r\n=JRiP\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.0-beta7_1595686412688_0.5505545921403636"},"_hasShrinkwrap":false},"2.0.0":{"name":"hdr-histogram-js","version":"2.0.0","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","keywords":["hdr-histogram","hdr-histogram-js","percentiles","monitoring","latency","performance"],"scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@2.0.0","dist":{"shasum":"7ee0aa41d9839d0fcf9497e2ed98f863e6bd9918","integrity":"sha512-Eeiqg/HKWQWZTTkV0d5BrdkdwlV3IWQK+XVAR/f5uxMS0rZZvNHNTMtszFedAd/PsK+n0l4Ro+HCUPnZ/xJhdw==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.0.tgz","fileCount":298,"unpackedSize":5206223,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfHxVaCRA9TVsSAnZWagAAmy8P/3LEiIaLqhijwngoLBXU\n5EwrA/loc9wIFCYXgJotFYXh9tifF5O2slmEsk8hxHCHHRMDUYRhwaEAzw4g\nh+eZ5TtPeHvic5epvEfZaXnf149JSM3pwxKv8tHgWYjQpxV7o7Ftop2wlalh\n+9gXIvosITm+eJ7lGcdQi2GSMd2/qbeXD293dWyFHGc9cRKRe1t51YgXRo/S\n3d3I6seAApb3nuX6IgvE3ELsweWihj34O5RujDW+Ezy/L/1HwERZH30gcGj6\nnQlSDrsn6zfjzmCHKWmrUqTvZNeuZgDqHyXs6ve06X8cbwUgWNCcamj4XtMR\noKFpgJXZQs1RiLQZQgkqmaIwt28uOSq8EgCliFm7xoihBdPd5feOOndezRyU\nUPz6bbxXQmMcHrX+BA1FSstnuT1Wc1eAyYiR36QunP56Yzwa6SC36EdAP3is\nkk6ONgAg5RZHLxJKgiMRHKv02dMRNu41mzBavmR2K4i4KN28W5DIWJszsNlq\n9f/TPqwkdP8X/l6DG0fwaP9ArsRPzhoSaqBWTMakP+8in3t3j5Yeo8sYkV4E\nZqahDczNKtU8MEuY0638fz45VgqpRMCm12LWN9fxxNn7h/xFD8C5XT0BWR8G\nCUykPoBzDbErOKvuX0HjaWLn7dFF1QWg0p7onmVvenhtwKBMRPRiI84wILm+\nZi81\r\n=TzNp\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.0_1595872601468_0.33432959409367946"},"_hasShrinkwrap":false},"2.0.1":{"name":"hdr-histogram-js","version":"2.0.1","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","keywords":["hdr-histogram","hdr-histogram-js","percentiles","monitoring","latency","performance"],"scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD-2-Clause","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"licenseText":"BSD 2-Clause License\n\nCopyright (c) 2016, Alexandre Victoor\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","_id":"hdr-histogram-js@2.0.1","dist":{"shasum":"ecb1ff2bcb6181c3e93ff4af9472c28c7e97284e","integrity":"sha512-uPZxl1dAFnjUFHWLZmt93vUUvtHeaBay9nVNHu38SdOjMSF/4KqJUqa1Seuj08ptU1rEb6AHvB41X8n/zFZ74Q==","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.1.tgz","fileCount":298,"unpackedSize":5238681,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfIyQACRA9TVsSAnZWagAABU8P/RRz8RuEQNATkb3bLQCP\nJWGKGWNoTVFOEadIeb6PWONvliy6bmthcuY2JrQOm1wr+ywarYpqe6x1Ms+6\n/8fjrcct7Bo/P9bhtT6z2Wdot8heOnA6svrqyY5mIJXEhlKP2Ld2r4EAk7Nz\nfdKETTayJa53aNSyZWtcll0Rjw3ID2w5WF/ltOMdFmPLgaxCuauimBk6V39U\nwIwfB8f+DTJTwsUqgVutd5COjB5Fm4iEbO/k5TkTbj60px7kxLhxqizQY7Bs\nUHX0/n7guCFyOpWdfdFZFQ8FiGgo0cab5lbeZJ/5nts8vT0efVvn7AHqPVV6\n7naeltopWIXu3K3JE+mjMi6f13l2TBkUT2X72ar2MsAHSfagJcziK6mIacAx\nbJmqcxcoFZpCey9fNlB/EwFpR1DS66Q1dgVevkz9k/iCWpKxyzrtbAtjXjEk\nkffsQtfDW4wa9cjPuWkEzMpZlhKjTUaTSw8tXXT/PrE0weH98MTdnKSfKTLF\nTu5/uBYT9IY62hTkFPLOV62i6AghS+8Wo7uSZtaXjIyyA4zksg7WZebJghz7\nERe32vAIETEI8guGk1iXYFC322NDp5kLqoKwivrYr0LfycrUrryZosHfSPgV\nYK9GVLtJ1pc3ha/qERHt155kJYO4y6IhHxGT4UK5cztgXsUG/KneQ/oJp9ex\nMChI\r\n=hncq\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.1_1596138495399_0.9088119235629144"},"_hasShrinkwrap":false},"2.0.2":{"name":"hdr-histogram-js","version":"2.0.2","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","keywords":["hdr-histogram","hdr-histogram-js","percentiles","monitoring","latency","performance"],"scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug --exportRuntime","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert --exportRuntime","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@as-pect/cli":"^6.2.4","@babel/preset-env":"^7.14.8","@babel/preset-typescript":"^7.14.5","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.19.21","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","node-notifier":">=8.0.1","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.19.21","base64-js":"^1.2.0","pako":"^1.0.3"},"gitHead":"2530aa934037b7ce5668425d53c251b61bf08c9f","bugs":{"url":"https://github.com/HdrHistogram/HdrHistogramJS/issues"},"homepage":"https://github.com/HdrHistogram/HdrHistogramJS#readme","_id":"hdr-histogram-js@2.0.2","_nodeVersion":"12.11.1","_npmVersion":"6.11.3","dist":{"integrity":"sha512-ibUFxDbBc/PtXrZBHNCt4T0b8eKxHy7roG3QN3Ul35Z5iDhBJRs7agoS7ijajezq2HpOGBzB3+sDZLlgTJBIKg==","shasum":"9fbbb22bc51814a42b4dec22ae851ef6f46ff743","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.2.tgz","fileCount":169,"unpackedSize":677337,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhydOMCRA9TVsSAnZWagAA5oQP/js5x6NUbUqle/VdeRFu\nFO9AKUmsUOUEzRc/h61/Y1p2BR1UVAWLTAK9g2hGA5IP0mAWqhzBdXmxLSV7\nM7HQuoQpnLhEGH5JWus8UxwnKs9D4RVMdxJ2xbuiRMLxiS4B86Iot0wVydIF\nqb35jIFslmAyFuNju+ywXD82G9VrGLPZU/ERIr7i80JUWrQ2UADRT9LQOMzR\nlAYPw6jBk8zbGccbEeCIvCxo52aCwIj/FxDNJOJV2UFrGllXfGr/bYpnAp1Z\nCDMcdWLj17B6YgD+7ZP/cJxNeFqRtFI7NCb3Wp+VLeW4qzwmFnzWGccGOCjc\nfNG62EeWzRpCrQRgbPzfCFe8OgYCd0nhMYyzN2Q61/PhomF52zlFbVFy+BMI\nDoht0FY9iV8MC/vL12BaD9cre25SM6vIV0Iz+oP+YaS+f7KRbDD9juwhrUS1\nkzDVrnIymj7iublZ9bi2SfKooX2pFjFuqqp+vVSCT+1vRzsViaW6E+VsFRoL\nKPmkgiWKstKKfi4Xtu1r4aJ5BFQ07LF2j5YUcclywnoK4ISk19yMAQ0TaVjn\nCLYAOeq7Wv41rzMNsUl50F3NKB9A9A2KiR7PhcmtlL/ZLJtyOiTDKvQofe/S\nS+0CNW4M4jT3KesL4JQObZWVwSMjSfkmo6K4P/FxYkyJQWt5boxT3L1kj0ud\nQA4P\r\n=skJq\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.2_1640616844338_0.07754564816848242"},"_hasShrinkwrap":false,"deprecated":"This version does not work with nodejs@12"},"2.0.3":{"name":"hdr-histogram-js","version":"2.0.3","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","keywords":["hdr-histogram","hdr-histogram-js","percentiles","monitoring","latency","performance"],"scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@as-pect/cli":"^4.0.0","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.12","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.10.1","base64-js":"^1.2.0","pako":"^1.0.3"},"gitHead":"320a1693cf410ac209a8ad77335622d96105221d","bugs":{"url":"https://github.com/HdrHistogram/HdrHistogramJS/issues"},"homepage":"https://github.com/HdrHistogram/HdrHistogramJS#readme","_id":"hdr-histogram-js@2.0.3","_nodeVersion":"12.16.3","_npmVersion":"6.14.4","dist":{"integrity":"sha512-Hkn78wwzWHNCp2uarhzQ2SGFLU3JY8SBDDd3TAABK4fc30wm+MuPOrg5QVFVfkKOQd6Bfz3ukJEI+q9sXEkK1g==","shasum":"0b860534655722b6e3f3e7dca7b78867cf43dcb5","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.3.tgz","fileCount":169,"unpackedSize":660131,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhyurlCRA9TVsSAnZWagAANc0QAKF+m0dqcmXw9uM7TtWF\nRpLm3q0AJ+4LrIs/WNo+i9yqtpnO81SLyREr1hAB6ByFMqlcYXvtV+5Yb0ZG\n4YxuO6M/bZf35OPHWXw42B1eBbLK0Ieay4uYepr53RhfUY/C5pnwtH84pxZz\nSfZOoPgv8AQoAuBdXsY7iEo39zsIjiYmKZfXZeQWEToJJkne3650N3cK4PCr\nG+3U1ABZAzNBTsaVEP5yfw+Mz4exfW2LclGRk+a4h7B42E2Rn6tVAKROITgP\n+/lpV6GuckctR+PYLgVMkR2EsDrPtIaMB8LJOHFwyOWd5GJo+VCGHY0eh5OO\nCGzSF1gVrVPCxKSYjkx8mPS8qFdvWKGcFYTbn959rdDAYm1ZVoQvs6MbigS4\nrAHtrLf3OM3ZcG5WXMltXDmvJE7Yf47q2Yt/G/cxsPcGGz5Eru58tx18iJ68\nn0u+gKnYzhUlDL2joMRomH5mYra946VFMfuajEtvA9hgRBf+RH/5bKuborqC\nNeMFPkespc14wmPXeT7RdHkXwTSk6tjXfpbWmNhfPPDOZz80i7ND8gMuCrHq\nmrE6VOc8UIgtt+Rkouj8PoADnroQwO5MZ/wmGvcyjYb4OKhsg6ocaXhEz7jt\n0VF4O1aiSW2wUhubmLrfjNVwyI+vpi6v0TtukXlJ9eUBEHTHQm9JGqMxptOP\nF4UF\r\n=bT6U\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_2.0.3_1640688356868_0.46686846958555117"},"_hasShrinkwrap":false},"3.0.0":{"name":"hdr-histogram-js","version":"3.0.0","description":"TypeScript port of HdrHistogram","main":"dist/index.js","browser":"dist/hdrhistogram.umd.js","types":"dist/index.d.ts","keywords":["hdr-histogram","hdr-histogram-js","percentiles","monitoring","latency","performance"],"engines":{"node":">=14"},"scripts":{"tsc":"tsc --skipLibCheck --outDir dist --declaration true --sourceMap true","test":"jest","build":"npm run tsc && npm run rollup","prettier":"prettier --parser typescript -l src/**/*.ts","prettier:fix":"prettier --write --parser typescript -l src/**/*.ts","astest":"asp --verbose","astest:ci":"asp --summary","asbuild:untouched":"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --debug --exportRuntime","asbuild:optimized":"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap -O3 --noAssert --exportRuntime","asbuild:base64":"echo \"/** @internal */\nexport const BINARY = \\\"$(node ./base64.js build/optimized.wasm)\\\";\" > src/wasm/generated-wasm.ts","asbuild":"npm run asbuild:untouched && npm run asbuild:optimized && npm run asbuild:base64","rollup":"rollup -c"},"repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"author":{"name":"Alexandre Victoor"},"license":"BSD","devDependencies":{"@as-pect/cli":"^6.2.4","@babel/preset-env":"^7.14.8","@babel/preset-typescript":"^7.14.5","@types/benchmark":"^1.0.31","@types/jest":"^25.2.1","@types/node":"7.0.0","assemblyscript":"^0.19.21","benchmark":"^2.1.4","benny":"^3.6.14","fast-check":"^1.1.1","jest":"25.1.x","node-notifier":">=8.0.1","prettier":"^1.6.1","rollup":"^2.8.2","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-typescript":"^1.0.1","ts-jest":"25.0.x","ts-loader":"^3.5.0","ts-node":"^5.0.1","typescript":"^3.7.1","yargs":"^6.4.0"},"dependencies":{"@assemblyscript/loader":"^0.19.21","base64-js":"^1.2.0","pako":"^1.0.3"},"gitHead":"d55821d524ea4822823eb5167d9b8df98df26acb","bugs":{"url":"https://github.com/HdrHistogram/HdrHistogramJS/issues"},"homepage":"https://github.com/HdrHistogram/HdrHistogramJS#readme","_id":"hdr-histogram-js@3.0.0","_nodeVersion":"14.15.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-/EpvQI2/Z98mNFYEnlqJ8Ogful8OpArLG/6Tf2bPnkutBVLIeMVNHjk1ZDfshF2BUweipzbk+dB1hgSB7SIakw==","shasum":"8e2d9a68e3313147804c47d85a9c22a93f85e24b","tarball":"https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-3.0.0.tgz","fileCount":169,"unpackedSize":677376,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhyu6TCRA9TVsSAnZWagAAqbMP/2WB00ulQqlWj3zzAG3c\nKHSuXEvNwWrv15kLC4D+T+UIgpOP3ftZml/VbHOTX/e+w8C4JdWFAqCdbUDF\nsDnGcGyoxl9Y6vs0kcX/+cpCdZB0nodd8H3QRLw7/UTMHKJP4Zw0QCwn0e9R\nAK/7nlDPjQ7VU0UbSGZUyhaBxWhLHhs8VTWTaRbDNqbpnGm85zEwvifJR7ys\nQRi3HczaPLYNcvO8RNiCUTTt8zOEpnVb385TbEh0g2Q0ukdkLu+X++LoXJJL\nkXj+e5Yni1h185UsJ0QZv6s9tXR+CdcohBx3KGetXJ6zf2KQ5tdJ6qIm9e8N\nKKRyycW0zG00zo45mFLhSzGEyFR50UsCfeII9wKV4s7E6Au1dqPzPbUQWBgD\nLB+7w65iXeIOJ/ENLi61iZt80K9cVobjCjyS+8O43Q4v19z4VvQuav4sZxYF\nzKfZEd+cqnjPJrO9jE1YvGc0q0zUQ8LRZPAdzI8BHB48bisXNDyvgU+9vuJJ\njHObt4rVIWxxwO3EmocAtyg+v8Pp0VY95WnD4PM7QbNgznFEiKr/RyWjdBQ9\nw1cfeqf49x51+vd+Nnm2+lwml3rhuiz2ArP/KUN/8jQXfs7Hmlg9L7aPCVHc\nSeBzcaOZQWWCwcoSXYe9/r+EyJh7wD/F2BkSANbIi0GjrIedXdT7fBkx3ved\nzB/G\r\n=H9HW\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"alexvictoor","email":"alexvictoor@gmail.com"},"directories":{},"maintainers":[{"name":"alexvictoor","email":"alexvictoor@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hdr-histogram-js_3.0.0_1640689298915_0.00011945539732294286"},"_hasShrinkwrap":false}},"author":{"name":"Alexandre Victoor"},"license":"BSD","readmeFilename":"README.md","repository":{"type":"git","url":"git+https://github.com/HdrHistogram/HdrHistogramJS.git"},"keywords":["hdr-histogram","hdr-histogram-js","percentiles","monitoring","latency","performance"],"homepage":"https://github.com/HdrHistogram/HdrHistogramJS#readme","bugs":{"url":"https://github.com/HdrHistogram/HdrHistogramJS/issues"}}
